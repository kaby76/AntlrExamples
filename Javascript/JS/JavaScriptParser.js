// Generated from JavaScriptParser.g4 by ANTLR 4.9.1
// jshint ignore: start
import antlr4 from 'antlr4';
import JavaScriptParserListener from './JavaScriptParserListener.js';
import JavaScriptParserBase from './JavaScriptParserBase.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003~\u0403\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0003\u0002\u0005",
    "\u0002\u009a\n\u0002\u0003\u0002\u0005\u0002\u009d\n\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u00b7\n\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u00bb\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0006\u0006\u00c0\n\u0006\r\u0006\u000e",
    "\u0006\u00c1\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0005\b\u00c8",
    "\n\b\u0003\b\u0003\b\u0005\b\u00cc\n\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u00d3\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t",
    "\u00d9\n\t\f\t\u000e\t\u00dc\u000b\t\u0003\t\u0003\t\u0005\t\u00e0\n",
    "\t\u0005\t\u00e2\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u00eb\n\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u00ef\n\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r",
    "\u0005\r\u00f7\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u00fc",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u0105\n\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u010d",
    "\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0111\n\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0116\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007",
    "\u0012\u011f\n\u0012\f\u0012\u000e\u0012\u0122\u000b\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0127\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u0136\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u014a\n\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u014e\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0152\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u015a\n\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0163\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0168",
    "\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u0170\n\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u0175\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u017a\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0181\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0188\n\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u018f",
    "\n\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u01a1\n\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01a5\n\u001f\u0005",
    "\u001f\u01a7\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0006 \u01ac\n ",
    "\r \u000e \u01ad\u0003!\u0003!\u0003!\u0003!\u0005!\u01b4\n!\u0003\"",
    "\u0003\"\u0003\"\u0005\"\u01b9\n\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0005%\u01c8",
    "\n%\u0003%\u0005%\u01cb\n%\u0003&\u0003&\u0003&\u0005&\u01d0\n&\u0003",
    "&\u0005&\u01d3\n&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0003)\u0005)\u01de\n)\u0003)\u0003)\u0005)\u01e2\n)\u0003",
    ")\u0003)\u0003)\u0005)\u01e7\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    "*\u0003*\u0003*\u0003*\u0003+\u0003+\u0005+\u01f4\n+\u0003+\u0003+\u0007",
    "+\u01f8\n+\f+\u000e+\u01fb\u000b+\u0003+\u0003+\u0003,\u0003,\u0003",
    ",\u0003,\u0007,\u0203\n,\f,\u000e,\u0206\u000b,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0005,\u020e\n,\u0003,\u0003,\u0005,\u0212\n",
    ",\u0003,\u0003,\u0003,\u0003,\u0005,\u0218\n,\u0003-\u0005-\u021b\n",
    "-\u0003-\u0005-\u021e\n-\u0003-\u0003-\u0003-\u0005-\u0223\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u022b\n-\u0003-\u0005-\u022e",
    "\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0238",
    "\n-\u0003-\u0005-\u023b\n-\u0003-\u0003-\u0003-\u0005-\u0240\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u0247\n-\u0003.\u0003.\u0003.\u0007",
    ".\u024c\n.\f.\u000e.\u024f\u000b.\u0003.\u0003.\u0005.\u0253\n.\u0003",
    ".\u0005.\u0256\n.\u0003/\u0003/\u0003/\u0005/\u025b\n/\u00030\u0003",
    "0\u00030\u00031\u00051\u0261\n1\u00032\u00062\u0264\n2\r2\u000e2\u0265",
    "\u00033\u00033\u00033\u00033\u00034\u00074\u026d\n4\f4\u000e4\u0270",
    "\u000b4\u00034\u00054\u0273\n4\u00034\u00064\u0276\n4\r4\u000e4\u0277",
    "\u00034\u00074\u027b\n4\f4\u000e4\u027e\u000b4\u00034\u00074\u0281\n",
    "4\f4\u000e4\u0284\u000b4\u00035\u00055\u0287\n5\u00035\u00035\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00056\u0296\n6\u00036\u00056\u0299\n6\u00036\u00036\u00036\u0005",
    "6\u029e\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u02b5\n6\u00036\u00056\u02b8\n6\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00057\u02c1\n7\u00038\u00038\u0003",
    "8\u00038\u00078\u02c7\n8\f8\u000e8\u02ca\u000b8\u00038\u00058\u02cd",
    "\n8\u00058\u02cf\n8\u00038\u00038\u00039\u00059\u02d4\n9\u00039\u0003",
    "9\u00059\u02d8\n9\u0003:\u0003:\u0003:\u0007:\u02dd\n:\f:\u000e:\u02e0",
    "\u000b:\u0003;\u0003;\u0003;\u0003;\u0005;\u02e6\n;\u0003;\u0003;\u0003",
    ";\u0003;\u0005;\u02ec\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u0315\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u0355\n;\u0003;\u0003",
    ";\u0005;\u0359\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0007;\u0366\n;\f;\u000e;\u0369\u000b;\u0003",
    "<\u0003<\u0003<\u0005<\u036e\n<\u0003=\u0003=\u0003=\u0003=\u0007=\u0374",
    "\n=\f=\u000e=\u0377\u000b=\u0005=\u0379\n=\u0003=\u0005=\u037c\n=\u0003",
    "=\u0003=\u0003>\u0003>\u0005>\u0382\n>\u0003>\u0003>\u0005>\u0386\n",
    ">\u0003>\u0003>\u0005>\u038a\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0005>\u0392\n>\u0003>\u0003>\u0003>\u0003>\u0005>\u0398\n>\u0003",
    "?\u0003?\u0003?\u0005?\u039d\n?\u0003?\u0005?\u03a0\n?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0005@\u03a7\n@\u0003A\u0003A\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u03b2\nB\u0003C\u0003C\u0003D\u0003",
    "D\u0003E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003G\u0003",
    "G\u0005G\u03c2\nG\u0003H\u0003H\u0003I\u0003I\u0003I\u0005I\u03c9\n",
    "I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u03f9\nJ\u0003K\u0003",
    "K\u0003L\u0003L\u0003L\u0003L\u0005L\u0401\nL\u0003L\u0002\u0003tM\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0002\f\u0003",
    "\u0002\u001a\u001c\u0003\u0002\u0016\u0017\u0003\u0002 \"\u0003\u0002",
    "#&\u0003\u0002\'*\u0003\u00020;\u0003\u0002?C\u0003\u0002DG\u0005\u0002",
    "kkooww\u0003\u0002no\u0002\u04a7\u0002\u0099\u0003\u0002\u0002\u0002",
    "\u0004\u00a0\u0003\u0002\u0002\u0002\u0006\u00b6\u0003\u0002\u0002\u0002",
    "\b\u00b8\u0003\u0002\u0002\u0002\n\u00bf\u0003\u0002\u0002\u0002\f\u00c3",
    "\u0003\u0002\u0002\u0002\u000e\u00d2\u0003\u0002\u0002\u0002\u0010\u00d4",
    "\u0003\u0002\u0002\u0002\u0012\u00e5\u0003\u0002\u0002\u0002\u0014\u00ea",
    "\u0003\u0002\u0002\u0002\u0016\u00f0\u0003\u0002\u0002\u0002\u0018\u00f3",
    "\u0003\u0002\u0002\u0002\u001a\u0104\u0003\u0002\u0002\u0002\u001c\u0110",
    "\u0003\u0002\u0002\u0002\u001e\u0115\u0003\u0002\u0002\u0002 \u0117",
    "\u0003\u0002\u0002\u0002\"\u011a\u0003\u0002\u0002\u0002$\u0123\u0003",
    "\u0002\u0002\u0002&\u0128\u0003\u0002\u0002\u0002(\u012a\u0003\u0002",
    "\u0002\u0002*\u012e\u0003\u0002\u0002\u0002,\u016f\u0003\u0002\u0002",
    "\u0002.\u0174\u0003\u0002\u0002\u00020\u0176\u0003\u0002\u0002\u0002",
    "2\u017d\u0003\u0002\u0002\u00024\u0184\u0003\u0002\u0002\u00026\u018b",
    "\u0003\u0002\u0002\u00028\u0192\u0003\u0002\u0002\u0002:\u0198\u0003",
    "\u0002\u0002\u0002<\u019e\u0003\u0002\u0002\u0002>\u01ab\u0003\u0002",
    "\u0002\u0002@\u01af\u0003\u0002\u0002\u0002B\u01b5\u0003\u0002\u0002",
    "\u0002D\u01ba\u0003\u0002\u0002\u0002F\u01be\u0003\u0002\u0002\u0002",
    "H\u01c3\u0003\u0002\u0002\u0002J\u01cc\u0003\u0002\u0002\u0002L\u01d6",
    "\u0003\u0002\u0002\u0002N\u01d9\u0003\u0002\u0002\u0002P\u01dd\u0003",
    "\u0002\u0002\u0002R\u01ed\u0003\u0002\u0002\u0002T\u01f3\u0003\u0002",
    "\u0002\u0002V\u0217\u0003\u0002\u0002\u0002X\u0246\u0003\u0002\u0002",
    "\u0002Z\u0255\u0003\u0002\u0002\u0002\\\u0257\u0003\u0002\u0002\u0002",
    "^\u025c\u0003\u0002\u0002\u0002`\u0260\u0003\u0002\u0002\u0002b\u0263",
    "\u0003\u0002\u0002\u0002d\u0267\u0003\u0002\u0002\u0002f\u026e\u0003",
    "\u0002\u0002\u0002h\u0286\u0003\u0002\u0002\u0002j\u02b7\u0003\u0002",
    "\u0002\u0002l\u02c0\u0003\u0002\u0002\u0002n\u02c2\u0003\u0002\u0002",
    "\u0002p\u02d3\u0003\u0002\u0002\u0002r\u02d9\u0003\u0002\u0002\u0002",
    "t\u0314\u0003\u0002\u0002\u0002v\u036d\u0003\u0002\u0002\u0002x\u036f",
    "\u0003\u0002\u0002\u0002z\u0397\u0003\u0002\u0002\u0002|\u039f\u0003",
    "\u0002\u0002\u0002~\u03a6\u0003\u0002\u0002\u0002\u0080\u03a8\u0003",
    "\u0002\u0002\u0002\u0082\u03b1\u0003\u0002\u0002\u0002\u0084\u03b3\u0003",
    "\u0002\u0002\u0002\u0086\u03b5\u0003\u0002\u0002\u0002\u0088\u03b7\u0003",
    "\u0002\u0002\u0002\u008a\u03bb\u0003\u0002\u0002\u0002\u008c\u03c1\u0003",
    "\u0002\u0002\u0002\u008e\u03c3\u0003\u0002\u0002\u0002\u0090\u03c8\u0003",
    "\u0002\u0002\u0002\u0092\u03f8\u0003\u0002\u0002\u0002\u0094\u03fa\u0003",
    "\u0002\u0002\u0002\u0096\u0400\u0003\u0002\u0002\u0002\u0098\u009a\u0007",
    "\u0003\u0002\u0002\u0099\u0098\u0003\u0002\u0002\u0002\u0099\u009a\u0003",
    "\u0002\u0002\u0002\u009a\u009c\u0003\u0002\u0002\u0002\u009b\u009d\u0005",
    "b2\u0002\u009c\u009b\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002",
    "\u0002\u0002\u009d\u009e\u0003\u0002\u0002\u0002\u009e\u009f\u0007\u0002",
    "\u0002\u0003\u009f\u0003\u0003\u0002\u0002\u0002\u00a0\u00a1\u0005\u0006",
    "\u0004\u0002\u00a1\u0005\u0003\u0002\u0002\u0002\u00a2\u00b7\u0005\b",
    "\u0005\u0002\u00a3\u00b7\u0005 \u0011\u0002\u00a4\u00b7\u0005\f\u0007",
    "\u0002\u00a5\u00b7\u0005\u001a\u000e\u0002\u00a6\u00b7\u0005&\u0014",
    "\u0002\u00a7\u00b7\u0005R*\u0002\u00a8\u00b7\u0005(\u0015\u0002\u00a9",
    "\u00b7\u0005*\u0016\u0002\u00aa\u00b7\u0005,\u0017\u0002\u00ab\u00b7",
    "\u00050\u0019\u0002\u00ac\u00b7\u00052\u001a\u0002\u00ad\u00b7\u0005",
    "4\u001b\u0002\u00ae\u00b7\u00056\u001c\u0002\u00af\u00b7\u00058\u001d",
    "\u0002\u00b0\u00b7\u0005D#\u0002\u00b1\u00b7\u0005:\u001e\u0002\u00b2",
    "\u00b7\u0005F$\u0002\u00b3\u00b7\u0005H%\u0002\u00b4\u00b7\u0005N(\u0002",
    "\u00b5\u00b7\u0005P)\u0002\u00b6\u00a2\u0003\u0002\u0002\u0002\u00b6",
    "\u00a3\u0003\u0002\u0002\u0002\u00b6\u00a4\u0003\u0002\u0002\u0002\u00b6",
    "\u00a5\u0003\u0002\u0002\u0002\u00b6\u00a6\u0003\u0002\u0002\u0002\u00b6",
    "\u00a7\u0003\u0002\u0002\u0002\u00b6\u00a8\u0003\u0002\u0002\u0002\u00b6",
    "\u00a9\u0003\u0002\u0002\u0002\u00b6\u00aa\u0003\u0002\u0002\u0002\u00b6",
    "\u00ab\u0003\u0002\u0002\u0002\u00b6\u00ac\u0003\u0002\u0002\u0002\u00b6",
    "\u00ad\u0003\u0002\u0002\u0002\u00b6\u00ae\u0003\u0002\u0002\u0002\u00b6",
    "\u00af\u0003\u0002\u0002\u0002\u00b6\u00b0\u0003\u0002\u0002\u0002\u00b6",
    "\u00b1\u0003\u0002\u0002\u0002\u00b6\u00b2\u0003\u0002\u0002\u0002\u00b6",
    "\u00b3\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002\u00b6",
    "\u00b5\u0003\u0002\u0002\u0002\u00b7\u0007\u0003\u0002\u0002\u0002\u00b8",
    "\u00ba\u0007\u000b\u0002\u0002\u00b9\u00bb\u0005\n\u0006\u0002\u00ba",
    "\u00b9\u0003\u0002\u0002\u0002\u00ba\u00bb\u0003\u0002\u0002\u0002\u00bb",
    "\u00bc\u0003\u0002\u0002\u0002\u00bc\u00bd\u0007\f\u0002\u0002\u00bd",
    "\t\u0003\u0002\u0002\u0002\u00be\u00c0\u0005\u0006\u0004\u0002\u00bf",
    "\u00be\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1",
    "\u00bf\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2",
    "\u000b\u0003\u0002\u0002\u0002\u00c3\u00c4\u0007j\u0002\u0002\u00c4",
    "\u00c5\u0005\u000e\b\u0002\u00c5\r\u0003\u0002\u0002\u0002\u00c6\u00c8",
    "\u0005\u0012\n\u0002\u00c7\u00c6\u0003\u0002\u0002\u0002\u00c7\u00c8",
    "\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9\u00cc",
    "\u0005\u0014\u000b\u0002\u00ca\u00cc\u0005\u0010\t\u0002\u00cb\u00c9",
    "\u0003\u0002\u0002\u0002\u00cb\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0003\u0002\u0002\u0002\u00cd\u00ce\u0005\u0016\f\u0002\u00ce\u00cf",
    "\u0005\u0096L\u0002\u00cf\u00d3\u0003\u0002\u0002\u0002\u00d0\u00d1",
    "\u0007x\u0002\u0002\u00d1\u00d3\u0005\u0096L\u0002\u00d2\u00c7\u0003",
    "\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d3\u000f\u0003",
    "\u0002\u0002\u0002\u00d4\u00da\u0007\u000b\u0002\u0002\u00d5\u00d6\u0005",
    "\u0018\r\u0002\u00d6\u00d7\u0007\u000e\u0002\u0002\u00d7\u00d9\u0003",
    "\u0002\u0002\u0002\u00d8\u00d5\u0003\u0002\u0002\u0002\u00d9\u00dc\u0003",
    "\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00db\u0003",
    "\u0002\u0002\u0002\u00db\u00e1\u0003\u0002\u0002\u0002\u00dc\u00da\u0003",
    "\u0002\u0002\u0002\u00dd\u00df\u0005\u0018\r\u0002\u00de\u00e0\u0007",
    "\u000e\u0002\u0002\u00df\u00de\u0003\u0002\u0002\u0002\u00df\u00e0\u0003",
    "\u0002\u0002\u0002\u00e0\u00e2\u0003\u0002\u0002\u0002\u00e1\u00dd\u0003",
    "\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003",
    "\u0002\u0002\u0002\u00e3\u00e4\u0007\f\u0002\u0002\u00e4\u0011\u0003",
    "\u0002\u0002\u0002\u00e5\u00e6\u0005\u0018\r\u0002\u00e6\u00e7\u0007",
    "\u000e\u0002\u0002\u00e7\u0013\u0003\u0002\u0002\u0002\u00e8\u00eb\u0007",
    "\u001a\u0002\u0002\u00e9\u00eb\u0005\u008cG\u0002\u00ea\u00e8\u0003",
    "\u0002\u0002\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ee\u0003",
    "\u0002\u0002\u0002\u00ec\u00ed\u0007b\u0002\u0002\u00ed\u00ef\u0005",
    "\u008cG\u0002\u00ee\u00ec\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003",
    "\u0002\u0002\u0002\u00ef\u0015\u0003\u0002\u0002\u0002\u00f0\u00f1\u0007",
    "c\u0002\u0002\u00f1\u00f2\u0007x\u0002\u0002\u00f2\u0017\u0003\u0002",
    "\u0002\u0002\u00f3\u00f6\u0005\u008cG\u0002\u00f4\u00f5\u0007b\u0002",
    "\u0002\u00f5\u00f7\u0005\u008cG\u0002\u00f6\u00f4\u0003\u0002\u0002",
    "\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u0019\u0003\u0002\u0002",
    "\u0002\u00f8\u00fb\u0007i\u0002\u0002\u00f9\u00fc\u0005\u001c\u000f",
    "\u0002\u00fa\u00fc\u0005\u001e\u0010\u0002\u00fb\u00f9\u0003\u0002\u0002",
    "\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002\u0002",
    "\u0002\u00fd\u00fe\u0005\u0096L\u0002\u00fe\u0105\u0003\u0002\u0002",
    "\u0002\u00ff\u0100\u0007i\u0002\u0002\u0100\u0101\u0007\\\u0002\u0002",
    "\u0101\u0102\u0005t;\u0002\u0102\u0103\u0005\u0096L\u0002\u0103\u0105",
    "\u0003\u0002\u0002\u0002\u0104\u00f8\u0003\u0002\u0002\u0002\u0104\u00ff",
    "\u0003\u0002\u0002\u0002\u0105\u001b\u0003\u0002\u0002\u0002\u0106\u0107",
    "\u0005\u0014\u000b\u0002\u0107\u0108\u0005\u0016\f\u0002\u0108\u0109",
    "\u0005\u0096L\u0002\u0109\u0111\u0003\u0002\u0002\u0002\u010a\u010c",
    "\u0005\u0010\t\u0002\u010b\u010d\u0005\u0016\f\u0002\u010c\u010b\u0003",
    "\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u010e\u0003",
    "\u0002\u0002\u0002\u010e\u010f\u0005\u0096L\u0002\u010f\u0111\u0003",
    "\u0002\u0002\u0002\u0110\u0106\u0003\u0002\u0002\u0002\u0110\u010a\u0003",
    "\u0002\u0002\u0002\u0111\u001d\u0003\u0002\u0002\u0002\u0112\u0116\u0005",
    " \u0011\u0002\u0113\u0116\u0005R*\u0002\u0114\u0116\u0005P)\u0002\u0115",
    "\u0112\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002\u0002\u0002\u0115",
    "\u0114\u0003\u0002\u0002\u0002\u0116\u001f\u0003\u0002\u0002\u0002\u0117",
    "\u0118\u0005\"\u0012\u0002\u0118\u0119\u0005\u0096L\u0002\u0119!\u0003",
    "\u0002\u0002\u0002\u011a\u011b\u0005.\u0018\u0002\u011b\u0120\u0005",
    "$\u0013\u0002\u011c\u011d\u0007\u000e\u0002\u0002\u011d\u011f\u0005",
    "$\u0013\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011f\u0122\u0003",
    "\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120\u0121\u0003",
    "\u0002\u0002\u0002\u0121#\u0003\u0002\u0002\u0002\u0122\u0120\u0003",
    "\u0002\u0002\u0002\u0123\u0126\u0005v<\u0002\u0124\u0125\u0007\u000f",
    "\u0002\u0002\u0125\u0127\u0005t;\u0002\u0126\u0124\u0003\u0002\u0002",
    "\u0002\u0126\u0127\u0003\u0002\u0002\u0002\u0127%\u0003\u0002\u0002",
    "\u0002\u0128\u0129\u0007\r\u0002\u0002\u0129\'\u0003\u0002\u0002\u0002",
    "\u012a\u012b\u0006\u0015\u0002\u0002\u012b\u012c\u0005r:\u0002\u012c",
    "\u012d\u0005\u0096L\u0002\u012d)\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u0007]\u0002\u0002\u012f\u0130\u0007\t\u0002\u0002\u0130\u0131\u0005",
    "r:\u0002\u0131\u0132\u0007\n\u0002\u0002\u0132\u0135\u0005\u0006\u0004",
    "\u0002\u0133\u0134\u0007M\u0002\u0002\u0134\u0136\u0005\u0006\u0004",
    "\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002",
    "\u0002\u0136+\u0003\u0002\u0002\u0002\u0137\u0138\u0007I\u0002\u0002",
    "\u0138\u0139\u0005\u0006\u0004\u0002\u0139\u013a\u0007W\u0002\u0002",
    "\u013a\u013b\u0007\t\u0002\u0002\u013b\u013c\u0005r:\u0002\u013c\u013d",
    "\u0007\n\u0002\u0002\u013d\u013e\u0005\u0096L\u0002\u013e\u0170\u0003",
    "\u0002\u0002\u0002\u013f\u0140\u0007W\u0002\u0002\u0140\u0141\u0007",
    "\t\u0002\u0002\u0141\u0142\u0005r:\u0002\u0142\u0143\u0007\n\u0002\u0002",
    "\u0143\u0144\u0005\u0006\u0004\u0002\u0144\u0170\u0003\u0002\u0002\u0002",
    "\u0145\u0146\u0007U\u0002\u0002\u0146\u0149\u0007\t\u0002\u0002\u0147",
    "\u014a\u0005r:\u0002\u0148\u014a\u0005\"\u0012\u0002\u0149\u0147\u0003",
    "\u0002\u0002\u0002\u0149\u0148\u0003\u0002\u0002\u0002\u0149\u014a\u0003",
    "\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u014d\u0007",
    "\r\u0002\u0002\u014c\u014e\u0005r:\u0002\u014d\u014c\u0003\u0002\u0002",
    "\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002",
    "\u0002\u014f\u0151\u0007\r\u0002\u0002\u0150\u0152\u0005r:\u0002\u0151",
    "\u0150\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152",
    "\u0153\u0003\u0002\u0002\u0002\u0153\u0154\u0007\n\u0002\u0002\u0154",
    "\u0170\u0005\u0006\u0004\u0002\u0155\u0156\u0007U\u0002\u0002\u0156",
    "\u0159\u0007\t\u0002\u0002\u0157\u015a\u0005t;\u0002\u0158\u015a\u0005",
    "\"\u0012\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159\u0158\u0003",
    "\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0007",
    "`\u0002\u0002\u015c\u015d\u0005r:\u0002\u015d\u015e\u0007\n\u0002\u0002",
    "\u015e\u015f\u0005\u0006\u0004\u0002\u015f\u0170\u0003\u0002\u0002\u0002",
    "\u0160\u0162\u0007U\u0002\u0002\u0161\u0163\u0007l\u0002\u0002\u0162",
    "\u0161\u0003\u0002\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163",
    "\u0164\u0003\u0002\u0002\u0002\u0164\u0167\u0007\t\u0002\u0002\u0165",
    "\u0168\u0005t;\u0002\u0166\u0168\u0005\"\u0012\u0002\u0167\u0165\u0003",
    "\u0002\u0002\u0002\u0167\u0166\u0003\u0002\u0002\u0002\u0168\u0169\u0003",
    "\u0002\u0002\u0002\u0169\u016a\u0005\u008eH\u0002\u016a\u016b\u0006",
    "\u0017\u0003\u0002\u016b\u016c\u0005r:\u0002\u016c\u016d\u0007\n\u0002",
    "\u0002\u016d\u016e\u0005\u0006\u0004\u0002\u016e\u0170\u0003\u0002\u0002",
    "\u0002\u016f\u0137\u0003\u0002\u0002\u0002\u016f\u013f\u0003\u0002\u0002",
    "\u0002\u016f\u0145\u0003\u0002\u0002\u0002\u016f\u0155\u0003\u0002\u0002",
    "\u0002\u016f\u0160\u0003\u0002\u0002\u0002\u0170-\u0003\u0002\u0002",
    "\u0002\u0171\u0175\u0007O\u0002\u0002\u0172\u0175\u0005\u0094K\u0002",
    "\u0173\u0175\u0007h\u0002\u0002\u0174\u0171\u0003\u0002\u0002\u0002",
    "\u0174\u0172\u0003\u0002\u0002\u0002\u0174\u0173\u0003\u0002\u0002\u0002",
    "\u0175/\u0003\u0002\u0002\u0002\u0176\u0179\u0007T\u0002\u0002\u0177",
    "\u0178\u0006\u0019\u0004\u0002\u0178\u017a\u0005\u008eH\u0002\u0179",
    "\u0177\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a",
    "\u017b\u0003\u0002\u0002\u0002\u017b\u017c\u0005\u0096L\u0002\u017c",
    "1\u0003\u0002\u0002\u0002\u017d\u0180\u0007H\u0002\u0002\u017e\u017f",
    "\u0006\u001a\u0005\u0002\u017f\u0181\u0005\u008eH\u0002\u0180\u017e",
    "\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0182",
    "\u0003\u0002\u0002\u0002\u0182\u0183\u0005\u0096L\u0002\u01833\u0003",
    "\u0002\u0002\u0002\u0184\u0187\u0007R\u0002\u0002\u0185\u0186\u0006",
    "\u001b\u0006\u0002\u0186\u0188\u0005r:\u0002\u0187\u0185\u0003\u0002",
    "\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002",
    "\u0002\u0002\u0189\u018a\u0005\u0096L\u0002\u018a5\u0003\u0002\u0002",
    "\u0002\u018b\u018e\u0007v\u0002\u0002\u018c\u018d\u0006\u001c\u0007",
    "\u0002\u018d\u018f\u0005r:\u0002\u018e\u018c\u0003\u0002\u0002\u0002",
    "\u018e\u018f\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002",
    "\u0190\u0191\u0005\u0096L\u0002\u01917\u0003\u0002\u0002\u0002\u0192",
    "\u0193\u0007[\u0002\u0002\u0193\u0194\u0007\t\u0002\u0002\u0194\u0195",
    "\u0005r:\u0002\u0195\u0196\u0007\n\u0002\u0002\u0196\u0197\u0005\u0006",
    "\u0004\u0002\u01979\u0003\u0002\u0002\u0002\u0198\u0199\u0007V\u0002",
    "\u0002\u0199\u019a\u0007\t\u0002\u0002\u019a\u019b\u0005r:\u0002\u019b",
    "\u019c\u0007\n\u0002\u0002\u019c\u019d\u0005<\u001f\u0002\u019d;\u0003",
    "\u0002\u0002\u0002\u019e\u01a0\u0007\u000b\u0002\u0002\u019f\u01a1\u0005",
    "> \u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002",
    "\u0002\u0002\u01a1\u01a6\u0003\u0002\u0002\u0002\u01a2\u01a4\u0005B",
    "\"\u0002\u01a3\u01a5\u0005> \u0002\u01a4\u01a3\u0003\u0002\u0002\u0002",
    "\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7\u0003\u0002\u0002\u0002",
    "\u01a6\u01a2\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002",
    "\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01a9\u0007\f\u0002\u0002",
    "\u01a9=\u0003\u0002\u0002\u0002\u01aa\u01ac\u0005@!\u0002\u01ab\u01aa",
    "\u0003\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01ab",
    "\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae?",
    "\u0003\u0002\u0002\u0002\u01af\u01b0\u0007L\u0002\u0002\u01b0\u01b1",
    "\u0005r:\u0002\u01b1\u01b3\u0007\u0011\u0002\u0002\u01b2\u01b4\u0005",
    "\n\u0006\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003",
    "\u0002\u0002\u0002\u01b4A\u0003\u0002\u0002\u0002\u01b5\u01b6\u0007",
    "\\\u0002\u0002\u01b6\u01b8\u0007\u0011\u0002\u0002\u01b7\u01b9\u0005",
    "\n\u0006\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003",
    "\u0002\u0002\u0002\u01b9C\u0003\u0002\u0002\u0002\u01ba\u01bb\u0005",
    "\u008eH\u0002\u01bb\u01bc\u0007\u0011\u0002\u0002\u01bc\u01bd\u0005",
    "\u0006\u0004\u0002\u01bdE\u0003\u0002\u0002\u0002\u01be\u01bf\u0007",
    "^\u0002\u0002\u01bf\u01c0\u0006$\b\u0002\u01c0\u01c1\u0005r:\u0002\u01c1",
    "\u01c2\u0005\u0096L\u0002\u01c2G\u0003\u0002\u0002\u0002\u01c3\u01c4",
    "\u0007a\u0002\u0002\u01c4\u01ca\u0005\b\u0005\u0002\u01c5\u01c7\u0005",
    "J&\u0002\u01c6\u01c8\u0005L\'\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002",
    "\u01c7\u01c8\u0003\u0002\u0002\u0002\u01c8\u01cb\u0003\u0002\u0002\u0002",
    "\u01c9\u01cb\u0005L\'\u0002\u01ca\u01c5\u0003\u0002\u0002\u0002\u01ca",
    "\u01c9\u0003\u0002\u0002\u0002\u01cbI\u0003\u0002\u0002\u0002\u01cc",
    "\u01d2\u0007P\u0002\u0002\u01cd\u01cf\u0007\t\u0002\u0002\u01ce\u01d0",
    "\u0005v<\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003",
    "\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d3\u0007",
    "\n\u0002\u0002\u01d2\u01cd\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003",
    "\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d5\u0005",
    "\b\u0005\u0002\u01d5K\u0003\u0002\u0002\u0002\u01d6\u01d7\u0007Q\u0002",
    "\u0002\u01d7\u01d8\u0005\b\u0005\u0002\u01d8M\u0003\u0002\u0002\u0002",
    "\u01d9\u01da\u0007X\u0002\u0002\u01da\u01db\u0005\u0096L\u0002\u01db",
    "O\u0003\u0002\u0002\u0002\u01dc\u01de\u0007k\u0002\u0002\u01dd\u01dc",
    "\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01df",
    "\u0003\u0002\u0002\u0002\u01df\u01e1\u0007Y\u0002\u0002\u01e0\u01e2",
    "\u0007\u001a\u0002\u0002\u01e1\u01e0\u0003\u0002\u0002\u0002\u01e1\u01e2",
    "\u0003\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4",
    "\u0005\u008eH\u0002\u01e4\u01e6\u0007\t\u0002\u0002\u01e5\u01e7\u0005",
    "Z.\u0002\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002",
    "\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u01e9\u0007\n",
    "\u0002\u0002\u01e9\u01ea\u0007\u000b\u0002\u0002\u01ea\u01eb\u0005`",
    "1\u0002\u01eb\u01ec\u0007\f\u0002\u0002\u01ecQ\u0003\u0002\u0002\u0002",
    "\u01ed\u01ee\u0007d\u0002\u0002\u01ee\u01ef\u0005\u008eH\u0002\u01ef",
    "\u01f0\u0005T+\u0002\u01f0S\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007",
    "f\u0002\u0002\u01f2\u01f4\u0005t;\u0002\u01f3\u01f1\u0003\u0002\u0002",
    "\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002",
    "\u0002\u01f5\u01f9\u0007\u000b\u0002\u0002\u01f6\u01f8\u0005V,\u0002",
    "\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f8\u01fb\u0003\u0002\u0002\u0002",
    "\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002",
    "\u01fa\u01fc\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002",
    "\u01fc\u01fd\u0007\f\u0002\u0002\u01fdU\u0003\u0002\u0002\u0002\u01fe",
    "\u0203\u0007u\u0002\u0002\u01ff\u0200\u0006,\t\u0002\u0200\u0203\u0005",
    "\u008eH\u0002\u0201\u0203\u0007k\u0002\u0002\u0202\u01fe\u0003\u0002",
    "\u0002\u0002\u0202\u01ff\u0003\u0002\u0002\u0002\u0202\u0201\u0003\u0002",
    "\u0002\u0002\u0203\u0206\u0003\u0002\u0002\u0002\u0204\u0202\u0003\u0002",
    "\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u020d\u0003\u0002",
    "\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207\u020e\u0005X",
    "-\u0002\u0208\u0209\u0005v<\u0002\u0209\u020a\u0007\u000f\u0002\u0002",
    "\u020a\u020b\u0005x=\u0002\u020b\u020c\u0007\r\u0002\u0002\u020c\u020e",
    "\u0003\u0002\u0002\u0002\u020d\u0207\u0003\u0002\u0002\u0002\u020d\u0208",
    "\u0003\u0002\u0002\u0002\u020e\u0218\u0003\u0002\u0002\u0002\u020f\u0218",
    "\u0005&\u0014\u0002\u0210\u0212\u0007\u001f\u0002\u0002\u0211\u0210",
    "\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0213",
    "\u0003\u0002\u0002\u0002\u0213\u0214\u0005l7\u0002\u0214\u0215\u0007",
    "\u000f\u0002\u0002\u0215\u0216\u0005t;\u0002\u0216\u0218\u0003\u0002",
    "\u0002\u0002\u0217\u0204\u0003\u0002\u0002\u0002\u0217\u020f\u0003\u0002",
    "\u0002\u0002\u0217\u0211\u0003\u0002\u0002\u0002\u0218W\u0003\u0002",
    "\u0002\u0002\u0219\u021b\u0007\u001a\u0002\u0002\u021a\u0219\u0003\u0002",
    "\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b\u021d\u0003\u0002",
    "\u0002\u0002\u021c\u021e\u0007\u001f\u0002\u0002\u021d\u021c\u0003\u0002",
    "\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u021f\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0005l7\u0002\u0220\u0222\u0007\t\u0002\u0002",
    "\u0221\u0223\u0005Z.\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0222",
    "\u0223\u0003\u0002\u0002\u0002\u0223\u0224\u0003\u0002\u0002\u0002\u0224",
    "\u0225\u0007\n\u0002\u0002\u0225\u0226\u0007\u000b\u0002\u0002\u0226",
    "\u0227\u0005`1\u0002\u0227\u0228\u0007\f\u0002\u0002\u0228\u0247\u0003",
    "\u0002\u0002\u0002\u0229\u022b\u0007\u001a\u0002\u0002\u022a\u0229\u0003",
    "\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022d\u0003",
    "\u0002\u0002\u0002\u022c\u022e\u0007\u001f\u0002\u0002\u022d\u022c\u0003",
    "\u0002\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u022f\u0003",
    "\u0002\u0002\u0002\u022f\u0230\u0005\u0088E\u0002\u0230\u0231\u0007",
    "\t\u0002\u0002\u0231\u0232\u0007\n\u0002\u0002\u0232\u0233\u0007\u000b",
    "\u0002\u0002\u0233\u0234\u0005`1\u0002\u0234\u0235\u0007\f\u0002\u0002",
    "\u0235\u0247\u0003\u0002\u0002\u0002\u0236\u0238\u0007\u001a\u0002\u0002",
    "\u0237\u0236\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002",
    "\u0238\u023a\u0003\u0002\u0002\u0002\u0239\u023b\u0007\u001f\u0002\u0002",
    "\u023a\u0239\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002",
    "\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u023d\u0005\u008aF\u0002",
    "\u023d\u023f\u0007\t\u0002\u0002\u023e\u0240\u0005Z.\u0002\u023f\u023e",
    "\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0241",
    "\u0003\u0002\u0002\u0002\u0241\u0242\u0007\n\u0002\u0002\u0242\u0243",
    "\u0007\u000b\u0002\u0002\u0243\u0244\u0005`1\u0002\u0244\u0245\u0007",
    "\f\u0002\u0002\u0245\u0247\u0003\u0002\u0002\u0002\u0246\u021a\u0003",
    "\u0002\u0002\u0002\u0246\u022a\u0003\u0002\u0002\u0002\u0246\u0237\u0003",
    "\u0002\u0002\u0002\u0247Y\u0003\u0002\u0002\u0002\u0248\u024d\u0005",
    "\\/\u0002\u0249\u024a\u0007\u000e\u0002\u0002\u024a\u024c\u0005\\/\u0002",
    "\u024b\u0249\u0003\u0002\u0002\u0002\u024c\u024f\u0003\u0002\u0002\u0002",
    "\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002",
    "\u024e\u0252\u0003\u0002\u0002\u0002\u024f\u024d\u0003\u0002\u0002\u0002",
    "\u0250\u0251\u0007\u000e\u0002\u0002\u0251\u0253\u0005^0\u0002\u0252",
    "\u0250\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253",
    "\u0256\u0003\u0002\u0002\u0002\u0254\u0256\u0005^0\u0002\u0255\u0248",
    "\u0003\u0002\u0002\u0002\u0255\u0254\u0003\u0002\u0002\u0002\u0256[",
    "\u0003\u0002\u0002\u0002\u0257\u025a\u0005v<\u0002\u0258\u0259\u0007",
    "\u000f\u0002\u0002\u0259\u025b\u0005t;\u0002\u025a\u0258\u0003\u0002",
    "\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b]\u0003\u0002",
    "\u0002\u0002\u025c\u025d\u0007\u0012\u0002\u0002\u025d\u025e\u0005t",
    ";\u0002\u025e_\u0003\u0002\u0002\u0002\u025f\u0261\u0005b2\u0002\u0260",
    "\u025f\u0003\u0002\u0002\u0002\u0260\u0261\u0003\u0002\u0002\u0002\u0261",
    "a\u0003\u0002\u0002\u0002\u0262\u0264\u0005\u0004\u0003\u0002\u0263",
    "\u0262\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265",
    "\u0263\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266",
    "c\u0003\u0002\u0002\u0002\u0267\u0268\u0007\u0007\u0002\u0002\u0268",
    "\u0269\u0005f4\u0002\u0269\u026a\u0007\b\u0002\u0002\u026ae\u0003\u0002",
    "\u0002\u0002\u026b\u026d\u0007\u000e\u0002\u0002\u026c\u026b\u0003\u0002",
    "\u0002\u0002\u026d\u0270\u0003\u0002\u0002\u0002\u026e\u026c\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0272\u0003\u0002",
    "\u0002\u0002\u0270\u026e\u0003\u0002\u0002\u0002\u0271\u0273\u0005h",
    "5\u0002\u0272\u0271\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002",
    "\u0002\u0002\u0273\u027c\u0003\u0002\u0002\u0002\u0274\u0276\u0007\u000e",
    "\u0002\u0002\u0275\u0274\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002",
    "\u0002\u0002\u0277\u0275\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002",
    "\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027b\u0005h",
    "5\u0002\u027a\u0275\u0003\u0002\u0002\u0002\u027b\u027e\u0003\u0002",
    "\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002",
    "\u0002\u0002\u027d\u0282\u0003\u0002\u0002\u0002\u027e\u027c\u0003\u0002",
    "\u0002\u0002\u027f\u0281\u0007\u000e\u0002\u0002\u0280\u027f\u0003\u0002",
    "\u0002\u0002\u0281\u0284\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002",
    "\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283g\u0003\u0002",
    "\u0002\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0285\u0287\u0007\u0012",
    "\u0002\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002",
    "\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0005t",
    ";\u0002\u0289i\u0003\u0002\u0002\u0002\u028a\u028b\u0005l7\u0002\u028b",
    "\u028c\u0007\u0011\u0002\u0002\u028c\u028d\u0005t;\u0002\u028d\u02b8",
    "\u0003\u0002\u0002\u0002\u028e\u028f\u0007\u0007\u0002\u0002\u028f\u0290",
    "\u0005t;\u0002\u0290\u0291\u0007\b\u0002\u0002\u0291\u0292\u0007\u0011",
    "\u0002\u0002\u0292\u0293\u0005t;\u0002\u0293\u02b8\u0003\u0002\u0002",
    "\u0002\u0294\u0296\u0007k\u0002\u0002\u0295\u0294\u0003\u0002\u0002",
    "\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296\u0298\u0003\u0002\u0002",
    "\u0002\u0297\u0299\u0007\u001a\u0002\u0002\u0298\u0297\u0003\u0002\u0002",
    "\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002",
    "\u0002\u029a\u029b\u0005l7\u0002\u029b\u029d\u0007\t\u0002\u0002\u029c",
    "\u029e\u0005Z.\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029d\u029e",
    "\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a0",
    "\u0007\n\u0002\u0002\u02a0\u02a1\u0007\u000b\u0002\u0002\u02a1\u02a2",
    "\u0005`1\u0002\u02a2\u02a3\u0007\f\u0002\u0002\u02a3\u02b8\u0003\u0002",
    "\u0002\u0002\u02a4\u02a5\u0005\u0088E\u0002\u02a5\u02a6\u0007\t\u0002",
    "\u0002\u02a6\u02a7\u0007\n\u0002\u0002\u02a7\u02a8\u0007\u000b\u0002",
    "\u0002\u02a8\u02a9\u0005`1\u0002\u02a9\u02aa\u0007\f\u0002\u0002\u02aa",
    "\u02b8\u0003\u0002\u0002\u0002\u02ab\u02ac\u0005\u008aF\u0002\u02ac",
    "\u02ad\u0007\t\u0002\u0002\u02ad\u02ae\u0005\\/\u0002\u02ae\u02af\u0007",
    "\n\u0002\u0002\u02af\u02b0\u0007\u000b\u0002\u0002\u02b0\u02b1\u0005",
    "`1\u0002\u02b1\u02b2\u0007\f\u0002\u0002\u02b2\u02b8\u0003\u0002\u0002",
    "\u0002\u02b3\u02b5\u0007\u0012\u0002\u0002\u02b4\u02b3\u0003\u0002\u0002",
    "\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002",
    "\u0002\u02b6\u02b8\u0005t;\u0002\u02b7\u028a\u0003\u0002\u0002\u0002",
    "\u02b7\u028e\u0003\u0002\u0002\u0002\u02b7\u0295\u0003\u0002\u0002\u0002",
    "\u02b7\u02a4\u0003\u0002\u0002\u0002\u02b7\u02ab\u0003\u0002\u0002\u0002",
    "\u02b7\u02b4\u0003\u0002\u0002\u0002\u02b8k\u0003\u0002\u0002\u0002",
    "\u02b9\u02c1\u0005\u008cG\u0002\u02ba\u02c1\u0007x\u0002\u0002\u02bb",
    "\u02c1\u0005\u0084C\u0002\u02bc\u02bd\u0007\u0007\u0002\u0002\u02bd",
    "\u02be\u0005t;\u0002\u02be\u02bf\u0007\b\u0002\u0002\u02bf\u02c1\u0003",
    "\u0002\u0002\u0002\u02c0\u02b9\u0003\u0002\u0002\u0002\u02c0\u02ba\u0003",
    "\u0002\u0002\u0002\u02c0\u02bb\u0003\u0002\u0002\u0002\u02c0\u02bc\u0003",
    "\u0002\u0002\u0002\u02c1m\u0003\u0002\u0002\u0002\u02c2\u02ce\u0007",
    "\t\u0002\u0002\u02c3\u02c8\u0005p9\u0002\u02c4\u02c5\u0007\u000e\u0002",
    "\u0002\u02c5\u02c7\u0005p9\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002",
    "\u02c7\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002",
    "\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cc\u0003\u0002\u0002\u0002",
    "\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cd\u0007\u000e\u0002\u0002",
    "\u02cc\u02cb\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002",
    "\u02cd\u02cf\u0003\u0002\u0002\u0002\u02ce\u02c3\u0003\u0002\u0002\u0002",
    "\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002",
    "\u02d0\u02d1\u0007\n\u0002\u0002\u02d1o\u0003\u0002\u0002\u0002\u02d2",
    "\u02d4\u0007\u0012\u0002\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d3",
    "\u02d4\u0003\u0002\u0002\u0002\u02d4\u02d7\u0003\u0002\u0002\u0002\u02d5",
    "\u02d8\u0005t;\u0002\u02d6\u02d8\u0005\u008eH\u0002\u02d7\u02d5\u0003",
    "\u0002\u0002\u0002\u02d7\u02d6\u0003\u0002\u0002\u0002\u02d8q\u0003",
    "\u0002\u0002\u0002\u02d9\u02de\u0005t;\u0002\u02da\u02db\u0007\u000e",
    "\u0002\u0002\u02db\u02dd\u0005t;\u0002\u02dc\u02da\u0003\u0002\u0002",
    "\u0002\u02dd\u02e0\u0003\u0002\u0002\u0002\u02de\u02dc\u0003\u0002\u0002",
    "\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02dfs\u0003\u0002\u0002",
    "\u0002\u02e0\u02de\u0003\u0002\u0002\u0002\u02e1\u02e2\b;\u0001\u0002",
    "\u02e2\u0315\u0005z>\u0002\u02e3\u02e5\u0007d\u0002\u0002\u02e4\u02e6",
    "\u0005\u008eH\u0002\u02e5\u02e4\u0003\u0002\u0002\u0002\u02e5\u02e6",
    "\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u0315",
    "\u0005T+\u0002\u02e8\u02e9\u0007N\u0002\u0002\u02e9\u02eb\u0005t;\u0002",
    "\u02ea\u02ec\u0005n8\u0002\u02eb\u02ea\u0003\u0002\u0002\u0002\u02eb",
    "\u02ec\u0003\u0002\u0002\u0002\u02ec\u0315\u0003\u0002\u0002\u0002\u02ed",
    "\u02ee\u0007N\u0002\u0002\u02ee\u02ef\u0007\u0013\u0002\u0002\u02ef",
    "\u0315\u0005\u008eH\u0002\u02f0\u02f1\u0007_\u0002\u0002\u02f1\u0315",
    "\u0005t;\'\u02f2\u02f3\u0007S\u0002\u0002\u02f3\u0315\u0005t;&\u02f4",
    "\u02f5\u0007K\u0002\u0002\u02f5\u0315\u0005t;%\u02f6\u02f7\u0007\u0014",
    "\u0002\u0002\u02f7\u0315\u0005t;$\u02f8\u02f9\u0007\u0015\u0002\u0002",
    "\u02f9\u0315\u0005t;#\u02fa\u02fb\u0007\u0016\u0002\u0002\u02fb\u0315",
    "\u0005t;\"\u02fc\u02fd\u0007\u0017\u0002\u0002\u02fd\u0315\u0005t;!",
    "\u02fe\u02ff\u0007\u0018\u0002\u0002\u02ff\u0315\u0005t; \u0300\u0301",
    "\u0007\u0019\u0002\u0002\u0301\u0315\u0005t;\u001f\u0302\u0303\u0007",
    "l\u0002\u0002\u0303\u0315\u0005t;\u001e\u0304\u0305\u0007j\u0002\u0002",
    "\u0305\u0306\u0007\t\u0002\u0002\u0306\u0307\u0005t;\u0002\u0307\u0308",
    "\u0007\n\u0002\u0002\u0308\u0315\u0003\u0002\u0002\u0002\u0309\u0315",
    "\u00056\u001c\u0002\u030a\u0315\u0007Z\u0002\u0002\u030b\u0315\u0005",
    "\u008eH\u0002\u030c\u0315\u0007g\u0002\u0002\u030d\u0315\u0005\u0082",
    "B\u0002\u030e\u0315\u0005d3\u0002\u030f\u0315\u0005x=\u0002\u0310\u0311",
    "\u0007\t\u0002\u0002\u0311\u0312\u0005r:\u0002\u0312\u0313\u0007\n\u0002",
    "\u0002\u0313\u0315\u0003\u0002\u0002\u0002\u0314\u02e1\u0003\u0002\u0002",
    "\u0002\u0314\u02e3\u0003\u0002\u0002\u0002\u0314\u02e8\u0003\u0002\u0002",
    "\u0002\u0314\u02ed\u0003\u0002\u0002\u0002\u0314\u02f0\u0003\u0002\u0002",
    "\u0002\u0314\u02f2\u0003\u0002\u0002\u0002\u0314\u02f4\u0003\u0002\u0002",
    "\u0002\u0314\u02f6\u0003\u0002\u0002\u0002\u0314\u02f8\u0003\u0002\u0002",
    "\u0002\u0314\u02fa\u0003\u0002\u0002\u0002\u0314\u02fc\u0003\u0002\u0002",
    "\u0002\u0314\u02fe\u0003\u0002\u0002\u0002\u0314\u0300\u0003\u0002\u0002",
    "\u0002\u0314\u0302\u0003\u0002\u0002\u0002\u0314\u0304\u0003\u0002\u0002",
    "\u0002\u0314\u0309\u0003\u0002\u0002\u0002\u0314\u030a\u0003\u0002\u0002",
    "\u0002\u0314\u030b\u0003\u0002\u0002\u0002\u0314\u030c\u0003\u0002\u0002",
    "\u0002\u0314\u030d\u0003\u0002\u0002\u0002\u0314\u030e\u0003\u0002\u0002",
    "\u0002\u0314\u030f\u0003\u0002\u0002\u0002\u0314\u0310\u0003\u0002\u0002",
    "\u0002\u0315\u0367\u0003\u0002\u0002\u0002\u0316\u0317\f\u001d\u0002",
    "\u0002\u0317\u0318\u0007\u001d\u0002\u0002\u0318\u0366\u0005t;\u001d",
    "\u0319\u031a\f\u001c\u0002\u0002\u031a\u031b\t\u0002\u0002\u0002\u031b",
    "\u0366\u0005t;\u001d\u031c\u031d\f\u001b\u0002\u0002\u031d\u031e\t\u0003",
    "\u0002\u0002\u031e\u0366\u0005t;\u001c\u031f\u0320\f\u001a\u0002\u0002",
    "\u0320\u0321\u0007\u001e\u0002\u0002\u0321\u0366\u0005t;\u001b\u0322",
    "\u0323\f\u0019\u0002\u0002\u0323\u0324\t\u0004\u0002\u0002\u0324\u0366",
    "\u0005t;\u001a\u0325\u0326\f\u0018\u0002\u0002\u0326\u0327\t\u0005\u0002",
    "\u0002\u0327\u0366\u0005t;\u0019\u0328\u0329\f\u0017\u0002\u0002\u0329",
    "\u032a\u0007J\u0002\u0002\u032a\u0366\u0005t;\u0018\u032b\u032c\f\u0016",
    "\u0002\u0002\u032c\u032d\u0007`\u0002\u0002\u032d\u0366\u0005t;\u0017",
    "\u032e\u032f\f\u0015\u0002\u0002\u032f\u0330\t\u0006\u0002\u0002\u0330",
    "\u0366\u0005t;\u0016\u0331\u0332\f\u0014\u0002\u0002\u0332\u0333\u0007",
    "+\u0002\u0002\u0333\u0366\u0005t;\u0015\u0334\u0335\f\u0013\u0002\u0002",
    "\u0335\u0336\u0007,\u0002\u0002\u0336\u0366\u0005t;\u0014\u0337\u0338",
    "\f\u0012\u0002\u0002\u0338\u0339\u0007-\u0002\u0002\u0339\u0366\u0005",
    "t;\u0013\u033a\u033b\f\u0011\u0002\u0002\u033b\u033c\u0007.\u0002\u0002",
    "\u033c\u0366\u0005t;\u0012\u033d\u033e\f\u0010\u0002\u0002\u033e\u033f",
    "\u0007/\u0002\u0002\u033f\u0366\u0005t;\u0011\u0340\u0341\f\u000f\u0002",
    "\u0002\u0341\u0342\u0007\u0010\u0002\u0002\u0342\u0343\u0005t;\u0002",
    "\u0343\u0344\u0007\u0011\u0002\u0002\u0344\u0345\u0005t;\u0010\u0345",
    "\u0366\u0003\u0002\u0002\u0002\u0346\u0347\f\u000e\u0002\u0002\u0347",
    "\u0348\u0007\u000f\u0002\u0002\u0348\u0366\u0005t;\u000e\u0349\u034a",
    "\f\r\u0002\u0002\u034a\u034b\u0005\u0080A\u0002\u034b\u034c\u0005t;",
    "\r\u034c\u0366\u0003\u0002\u0002\u0002\u034d\u034e\f.\u0002\u0002\u034e",
    "\u034f\u0007\u0007\u0002\u0002\u034f\u0350\u0005r:\u0002\u0350\u0351",
    "\u0007\b\u0002\u0002\u0351\u0366\u0003\u0002\u0002\u0002\u0352\u0354",
    "\f-\u0002\u0002\u0353\u0355\u0007\u0010\u0002\u0002\u0354\u0353\u0003",
    "\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0003",
    "\u0002\u0002\u0002\u0356\u0358\u0007\u0013\u0002\u0002\u0357\u0359\u0007",
    "\u001f\u0002\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u0366\u0005",
    "\u008cG\u0002\u035b\u035c\f,\u0002\u0002\u035c\u0366\u0005n8\u0002\u035d",
    "\u035e\f)\u0002\u0002\u035e\u035f\u0006;\u001f\u0002\u035f\u0366\u0007",
    "\u0014\u0002\u0002\u0360\u0361\f(\u0002\u0002\u0361\u0362\u0006;!\u0002",
    "\u0362\u0366\u0007\u0015\u0002\u0002\u0363\u0364\f\u000b\u0002\u0002",
    "\u0364\u0366\u0007y\u0002\u0002\u0365\u0316\u0003\u0002\u0002\u0002",
    "\u0365\u0319\u0003\u0002\u0002\u0002\u0365\u031c\u0003\u0002\u0002\u0002",
    "\u0365\u031f\u0003\u0002\u0002\u0002\u0365\u0322\u0003\u0002\u0002\u0002",
    "\u0365\u0325\u0003\u0002\u0002\u0002\u0365\u0328\u0003\u0002\u0002\u0002",
    "\u0365\u032b\u0003\u0002\u0002\u0002\u0365\u032e\u0003\u0002\u0002\u0002",
    "\u0365\u0331\u0003\u0002\u0002\u0002\u0365\u0334\u0003\u0002\u0002\u0002",
    "\u0365\u0337\u0003\u0002\u0002\u0002\u0365\u033a\u0003\u0002\u0002\u0002",
    "\u0365\u033d\u0003\u0002\u0002\u0002\u0365\u0340\u0003\u0002\u0002\u0002",
    "\u0365\u0346\u0003\u0002\u0002\u0002\u0365\u0349\u0003\u0002\u0002\u0002",
    "\u0365\u034d\u0003\u0002\u0002\u0002\u0365\u0352\u0003\u0002\u0002\u0002",
    "\u0365\u035b\u0003\u0002\u0002\u0002\u0365\u035d\u0003\u0002\u0002\u0002",
    "\u0365\u0360\u0003\u0002\u0002\u0002\u0365\u0363\u0003\u0002\u0002\u0002",
    "\u0366\u0369\u0003\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002",
    "\u0367\u0368\u0003\u0002\u0002\u0002\u0368u\u0003\u0002\u0002\u0002",
    "\u0369\u0367\u0003\u0002\u0002\u0002\u036a\u036e\u0005\u008eH\u0002",
    "\u036b\u036e\u0005d3\u0002\u036c\u036e\u0005x=\u0002\u036d\u036a\u0003",
    "\u0002\u0002\u0002\u036d\u036b\u0003\u0002\u0002\u0002\u036d\u036c\u0003",
    "\u0002\u0002\u0002\u036ew\u0003\u0002\u0002\u0002\u036f\u0378\u0007",
    "\u000b\u0002\u0002\u0370\u0375\u0005j6\u0002\u0371\u0372\u0007\u000e",
    "\u0002\u0002\u0372\u0374\u0005j6\u0002\u0373\u0371\u0003\u0002\u0002",
    "\u0002\u0374\u0377\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002",
    "\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0379\u0003\u0002\u0002",
    "\u0002\u0377\u0375\u0003\u0002\u0002\u0002\u0378\u0370\u0003\u0002\u0002",
    "\u0002\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u037b\u0003\u0002\u0002",
    "\u0002\u037a\u037c\u0007\u000e\u0002\u0002\u037b\u037a\u0003\u0002\u0002",
    "\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002",
    "\u0002\u037d\u037e\u0007\f\u0002\u0002\u037ey\u0003\u0002\u0002\u0002",
    "\u037f\u0398\u0005P)\u0002\u0380\u0382\u0007k\u0002\u0002\u0381\u0380",
    "\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0383",
    "\u0003\u0002\u0002\u0002\u0383\u0385\u0007Y\u0002\u0002\u0384\u0386",
    "\u0007\u001a\u0002\u0002\u0385\u0384\u0003\u0002\u0002\u0002\u0385\u0386",
    "\u0003\u0002\u0002\u0002\u0386\u0387\u0003\u0002\u0002\u0002\u0387\u0389",
    "\u0007\t\u0002\u0002\u0388\u038a\u0005Z.\u0002\u0389\u0388\u0003\u0002",
    "\u0002\u0002\u0389\u038a\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002",
    "\u0002\u0002\u038b\u038c\u0007\n\u0002\u0002\u038c\u038d\u0007\u000b",
    "\u0002\u0002\u038d\u038e\u0005`1\u0002\u038e\u038f\u0007\f\u0002\u0002",
    "\u038f\u0398\u0003\u0002\u0002\u0002\u0390\u0392\u0007k\u0002\u0002",
    "\u0391\u0390\u0003\u0002\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002",
    "\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0394\u0005|?\u0002\u0394",
    "\u0395\u0007<\u0002\u0002\u0395\u0396\u0005~@\u0002\u0396\u0398\u0003",
    "\u0002\u0002\u0002\u0397\u037f\u0003\u0002\u0002\u0002\u0397\u0381\u0003",
    "\u0002\u0002\u0002\u0397\u0391\u0003\u0002\u0002\u0002\u0398{\u0003",
    "\u0002\u0002\u0002\u0399\u03a0\u0005\u008eH\u0002\u039a\u039c\u0007",
    "\t\u0002\u0002\u039b\u039d\u0005Z.\u0002\u039c\u039b\u0003\u0002\u0002",
    "\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039e\u0003\u0002\u0002",
    "\u0002\u039e\u03a0\u0007\n\u0002\u0002\u039f\u0399\u0003\u0002\u0002",
    "\u0002\u039f\u039a\u0003\u0002\u0002\u0002\u03a0}\u0003\u0002\u0002",
    "\u0002\u03a1\u03a7\u0005t;\u0002\u03a2\u03a3\u0007\u000b\u0002\u0002",
    "\u03a3\u03a4\u0005`1\u0002\u03a4\u03a5\u0007\f\u0002\u0002\u03a5\u03a7",
    "\u0003\u0002\u0002\u0002\u03a6\u03a1\u0003\u0002\u0002\u0002\u03a6\u03a2",
    "\u0003\u0002\u0002\u0002\u03a7\u007f\u0003\u0002\u0002\u0002\u03a8\u03a9",
    "\t\u0007\u0002\u0002\u03a9\u0081\u0003\u0002\u0002\u0002\u03aa\u03b2",
    "\u0007=\u0002\u0002\u03ab\u03b2\u0007>\u0002\u0002\u03ac\u03b2\u0007",
    "x\u0002\u0002\u03ad\u03b2\u0007y\u0002\u0002\u03ae\u03b2\u0007\u0006",
    "\u0002\u0002\u03af\u03b2\u0005\u0084C\u0002\u03b0\u03b2\u0005\u0086",
    "D\u0002\u03b1\u03aa\u0003\u0002\u0002\u0002\u03b1\u03ab\u0003\u0002",
    "\u0002\u0002\u03b1\u03ac\u0003\u0002\u0002\u0002\u03b1\u03ad\u0003\u0002",
    "\u0002\u0002\u03b1\u03ae\u0003\u0002\u0002\u0002\u03b1\u03af\u0003\u0002",
    "\u0002\u0002\u03b1\u03b0\u0003\u0002\u0002\u0002\u03b2\u0083\u0003\u0002",
    "\u0002\u0002\u03b3\u03b4\t\b\u0002\u0002\u03b4\u0085\u0003\u0002\u0002",
    "\u0002\u03b5\u03b6\t\t\u0002\u0002\u03b6\u0087\u0003\u0002\u0002\u0002",
    "\u03b7\u03b8\u0006E#\u0002\u03b8\u03b9\u0005\u008eH\u0002\u03b9\u03ba",
    "\u0005l7\u0002\u03ba\u0089\u0003\u0002\u0002\u0002\u03bb\u03bc\u0006",
    "F$\u0002\u03bc\u03bd\u0005\u008eH\u0002\u03bd\u03be\u0005l7\u0002\u03be",
    "\u008b\u0003\u0002\u0002\u0002\u03bf\u03c2\u0005\u008eH\u0002\u03c0",
    "\u03c2\u0005\u0090I\u0002\u03c1\u03bf\u0003\u0002\u0002\u0002\u03c1",
    "\u03c0\u0003\u0002\u0002\u0002\u03c2\u008d\u0003\u0002\u0002\u0002\u03c3",
    "\u03c4\t\n\u0002\u0002\u03c4\u008f\u0003\u0002\u0002\u0002\u03c5\u03c9",
    "\u0005\u0092J\u0002\u03c6\u03c9\u0007=\u0002\u0002\u03c7\u03c9\u0007",
    ">\u0002\u0002\u03c8\u03c5\u0003\u0002\u0002\u0002\u03c8\u03c6\u0003",
    "\u0002\u0002\u0002\u03c8\u03c7\u0003\u0002\u0002\u0002\u03c9\u0091\u0003",
    "\u0002\u0002\u0002\u03ca\u03f9\u0007H\u0002\u0002\u03cb\u03f9\u0007",
    "I\u0002\u0002\u03cc\u03f9\u0007J\u0002\u0002\u03cd\u03f9\u0007K\u0002",
    "\u0002\u03ce\u03f9\u0007L\u0002\u0002\u03cf\u03f9\u0007M\u0002\u0002",
    "\u03d0\u03f9\u0007N\u0002\u0002\u03d1\u03f9\u0007O\u0002\u0002\u03d2",
    "\u03f9\u0007P\u0002\u0002\u03d3\u03f9\u0007Q\u0002\u0002\u03d4\u03f9",
    "\u0007R\u0002\u0002\u03d5\u03f9\u0007S\u0002\u0002\u03d6\u03f9\u0007",
    "T\u0002\u0002\u03d7\u03f9\u0007U\u0002\u0002\u03d8\u03f9\u0007V\u0002",
    "\u0002\u03d9\u03f9\u0007W\u0002\u0002\u03da\u03f9\u0007X\u0002\u0002",
    "\u03db\u03f9\u0007Y\u0002\u0002\u03dc\u03f9\u0007Z\u0002\u0002\u03dd",
    "\u03f9\u0007[\u0002\u0002\u03de\u03f9\u0007\\\u0002\u0002\u03df\u03f9",
    "\u0007]\u0002\u0002\u03e0\u03f9\u0007^\u0002\u0002\u03e1\u03f9\u0007",
    "_\u0002\u0002\u03e2\u03f9\u0007`\u0002\u0002\u03e3\u03f9\u0007a\u0002",
    "\u0002\u03e4\u03f9\u0007d\u0002\u0002\u03e5\u03f9\u0007e\u0002\u0002",
    "\u03e6\u03f9\u0007f\u0002\u0002\u03e7\u03f9\u0007g\u0002\u0002\u03e8",
    "\u03f9\u0007h\u0002\u0002\u03e9\u03f9\u0007i\u0002\u0002\u03ea\u03f9",
    "\u0007j\u0002\u0002\u03eb\u03f9\u0007m\u0002\u0002\u03ec\u03f9\u0005",
    "\u0094K\u0002\u03ed\u03f9\u0007p\u0002\u0002\u03ee\u03f9\u0007q\u0002",
    "\u0002\u03ef\u03f9\u0007r\u0002\u0002\u03f0\u03f9\u0007s\u0002\u0002",
    "\u03f1\u03f9\u0007t\u0002\u0002\u03f2\u03f9\u0007u\u0002\u0002\u03f3",
    "\u03f9\u0007v\u0002\u0002\u03f4\u03f9\u0007k\u0002\u0002\u03f5\u03f9",
    "\u0007l\u0002\u0002\u03f6\u03f9\u0007c\u0002\u0002\u03f7\u03f9\u0007",
    "b\u0002\u0002\u03f8\u03ca\u0003\u0002\u0002\u0002\u03f8\u03cb\u0003",
    "\u0002\u0002\u0002\u03f8\u03cc\u0003\u0002\u0002\u0002\u03f8\u03cd\u0003",
    "\u0002\u0002\u0002\u03f8\u03ce\u0003\u0002\u0002\u0002\u03f8\u03cf\u0003",
    "\u0002\u0002\u0002\u03f8\u03d0\u0003\u0002\u0002\u0002\u03f8\u03d1\u0003",
    "\u0002\u0002\u0002\u03f8\u03d2\u0003\u0002\u0002\u0002\u03f8\u03d3\u0003",
    "\u0002\u0002\u0002\u03f8\u03d4\u0003\u0002\u0002\u0002\u03f8\u03d5\u0003",
    "\u0002\u0002\u0002\u03f8\u03d6\u0003\u0002\u0002\u0002\u03f8\u03d7\u0003",
    "\u0002\u0002\u0002\u03f8\u03d8\u0003\u0002\u0002\u0002\u03f8\u03d9\u0003",
    "\u0002\u0002\u0002\u03f8\u03da\u0003\u0002\u0002\u0002\u03f8\u03db\u0003",
    "\u0002\u0002\u0002\u03f8\u03dc\u0003\u0002\u0002\u0002\u03f8\u03dd\u0003",
    "\u0002\u0002\u0002\u03f8\u03de\u0003\u0002\u0002\u0002\u03f8\u03df\u0003",
    "\u0002\u0002\u0002\u03f8\u03e0\u0003\u0002\u0002\u0002\u03f8\u03e1\u0003",
    "\u0002\u0002\u0002\u03f8\u03e2\u0003\u0002\u0002\u0002\u03f8\u03e3\u0003",
    "\u0002\u0002\u0002\u03f8\u03e4\u0003\u0002\u0002\u0002\u03f8\u03e5\u0003",
    "\u0002\u0002\u0002\u03f8\u03e6\u0003\u0002\u0002\u0002\u03f8\u03e7\u0003",
    "\u0002\u0002\u0002\u03f8\u03e8\u0003\u0002\u0002\u0002\u03f8\u03e9\u0003",
    "\u0002\u0002\u0002\u03f8\u03ea\u0003\u0002\u0002\u0002\u03f8\u03eb\u0003",
    "\u0002\u0002\u0002\u03f8\u03ec\u0003\u0002\u0002\u0002\u03f8\u03ed\u0003",
    "\u0002\u0002\u0002\u03f8\u03ee\u0003\u0002\u0002\u0002\u03f8\u03ef\u0003",
    "\u0002\u0002\u0002\u03f8\u03f0\u0003\u0002\u0002\u0002\u03f8\u03f1\u0003",
    "\u0002\u0002\u0002\u03f8\u03f2\u0003\u0002\u0002\u0002\u03f8\u03f3\u0003",
    "\u0002\u0002\u0002\u03f8\u03f4\u0003\u0002\u0002\u0002\u03f8\u03f5\u0003",
    "\u0002\u0002\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f7\u0003",
    "\u0002\u0002\u0002\u03f9\u0093\u0003\u0002\u0002\u0002\u03fa\u03fb\t",
    "\u000b\u0002\u0002\u03fb\u0095\u0003\u0002\u0002\u0002\u03fc\u0401\u0007",
    "\r\u0002\u0002\u03fd\u0401\u0007\u0002\u0002\u0003\u03fe\u0401\u0006",
    "L%\u0002\u03ff\u0401\u0006L&\u0002\u0400\u03fc\u0003\u0002\u0002\u0002",
    "\u0400\u03fd\u0003\u0002\u0002\u0002\u0400\u03fe\u0003\u0002\u0002\u0002",
    "\u0400\u03ff\u0003\u0002\u0002\u0002\u0401\u0097\u0003\u0002\u0002\u0002",
    "q\u0099\u009c\u00b6\u00ba\u00c1\u00c7\u00cb\u00d2\u00da\u00df\u00e1",
    "\u00ea\u00ee\u00f6\u00fb\u0104\u010c\u0110\u0115\u0120\u0126\u0135\u0149",
    "\u014d\u0151\u0159\u0162\u0167\u016f\u0174\u0179\u0180\u0187\u018e\u01a0",
    "\u01a4\u01a6\u01ad\u01b3\u01b8\u01c7\u01ca\u01cf\u01d2\u01dd\u01e1\u01e6",
    "\u01f3\u01f9\u0202\u0204\u020d\u0211\u0217\u021a\u021d\u0222\u022a\u022d",
    "\u0237\u023a\u023f\u0246\u024d\u0252\u0255\u025a\u0260\u0265\u026e\u0272",
    "\u0277\u027c\u0282\u0286\u0295\u0298\u029d\u02b4\u02b7\u02c0\u02c8\u02cc",
    "\u02ce\u02d3\u02d7\u02de\u02e5\u02eb\u0314\u0354\u0358\u0365\u0367\u036d",
    "\u0375\u0378\u037b\u0381\u0385\u0389\u0391\u0397\u039c\u039f\u03a6\u03b1",
    "\u03c1\u03c8\u03f8\u0400"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class JavaScriptParser extends JavaScriptParserBase {

    static grammarFileName = "JavaScriptParser.g4";
    static literalNames = [ null, null, null, null, null, "'['", "']'", 
                            "'('", "')'", "'{'", "'}'", "';'", "','", "'='", 
                            "'?'", "':'", "'...'", "'.'", "'++'", "'--'", 
                            "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", 
                            "'**'", "'??'", "'#'", "'>>'", "'<<'", "'>>>'", 
                            "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
                            "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", 
                            "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
                            "'<<='", "'>>='", "'>>>='", "'&='", "'^='", 
                            "'|='", "'**='", "'=>'", "'null'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'break'", "'do'", "'instanceof'", "'typeof'", 
                            "'case'", "'else'", "'new'", "'var'", "'catch'", 
                            "'finally'", "'return'", "'void'", "'continue'", 
                            "'for'", "'switch'", "'while'", "'debugger'", 
                            "'function'", "'this'", "'with'", "'default'", 
                            "'if'", "'throw'", "'delete'", "'in'", "'try'", 
                            "'as'", "'from'", "'class'", "'enum'", "'extends'", 
                            "'super'", "'const'", "'export'", "'import'", 
                            "'async'", "'await'", "'implements'", null, 
                            null, "'private'", "'public'", "'interface'", 
                            "'package'", "'protected'", "'static'", "'yield'" ];
    static symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment", 
                             "RegularExpressionLiteral", "OpenBracket", 
                             "CloseBracket", "OpenParen", "CloseParen", 
                             "OpenBrace", "CloseBrace", "SemiColon", "Comma", 
                             "Assign", "QuestionMark", "Colon", "Ellipsis", 
                             "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", 
                             "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                             "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                             "LeftShiftArithmetic", "RightShiftLogical", 
                             "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                             "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                             "DivideAssign", "ModulusAssign", "PlusAssign", 
                             "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", 
                             "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                             "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                             "Break", "Do", "Instanceof", "Typeof", "Case", 
                             "Else", "New", "Var", "Catch", "Finally", "Return", 
                             "Void", "Continue", "For", "Switch", "While", 
                             "Debugger", "Function", "This", "With", "Default", 
                             "If", "Throw", "Delete", "In", "Try", "As", 
                             "From", "Class", "Enum", "Extends", "Super", 
                             "Const", "Export", "Import", "Async", "Await", 
                             "Implements", "StrictLet", "NonStrictLet", 
                             "Private", "Public", "Interface", "Package", 
                             "Protected", "Static", "Yield", "Identifier", 
                             "StringLiteral", "TemplateStringLiteral", "WhiteSpaces", 
                             "LineTerminator", "HtmlComment", "CDataComment", 
                             "UnexpectedCharacter" ];
    static ruleNames = [ "program", "sourceElement", "statement", "block", 
                         "statementList", "importStatement", "importFromBlock", 
                         "moduleItems", "importDefault", "importNamespace", 
                         "importFrom", "aliasName", "exportStatement", "exportFromBlock", 
                         "declaration", "variableStatement", "variableDeclarationList", 
                         "variableDeclaration", "emptyStatement", "expressionStatement", 
                         "ifStatement", "iterationStatement", "varModifier", 
                         "continueStatement", "breakStatement", "returnStatement", 
                         "yieldStatement", "withStatement", "switchStatement", 
                         "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                         "labelledStatement", "throwStatement", "tryStatement", 
                         "catchProduction", "finallyProduction", "debuggerStatement", 
                         "functionDeclaration", "classDeclaration", "classTail", 
                         "classElement", "methodDefinition", "formalParameterList", 
                         "formalParameterArg", "lastFormalParameterArg", 
                         "functionBody", "sourceElements", "arrayLiteral", 
                         "elementList", "arrayElement", "propertyAssignment", 
                         "propertyName", "arguments", "argument", "expressionSequence", 
                         "singleExpression", "assignable", "objectLiteral", 
                         "anoymousFunction", "arrowFunctionParameters", 
                         "arrowFunctionBody", "assignmentOperator", "literal", 
                         "numericLiteral", "bigintLiteral", "getter", "setter", 
                         "identifierName", "identifier", "reservedWord", 
                         "keyword", "let_", "eos" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = JavaScriptParser.ruleNames;
        this.literalNames = JavaScriptParser.literalNames;
        this.symbolicNames = JavaScriptParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 19:
    	    		return this.expressionStatement_sempred(localctx, predIndex);
    	case 21:
    	    		return this.iterationStatement_sempred(localctx, predIndex);
    	case 23:
    	    		return this.continueStatement_sempred(localctx, predIndex);
    	case 24:
    	    		return this.breakStatement_sempred(localctx, predIndex);
    	case 25:
    	    		return this.returnStatement_sempred(localctx, predIndex);
    	case 26:
    	    		return this.yieldStatement_sempred(localctx, predIndex);
    	case 34:
    	    		return this.throwStatement_sempred(localctx, predIndex);
    	case 42:
    	    		return this.classElement_sempred(localctx, predIndex);
    	case 57:
    	    		return this.singleExpression_sempred(localctx, predIndex);
    	case 67:
    	    		return this.getter_sempred(localctx, predIndex);
    	case 68:
    	    		return this.setter_sempred(localctx, predIndex);
    	case 74:
    	    		return this.eos_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expressionStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.notOpenBraceAndNotFunction();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    iterationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.p("of");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    continueStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    breakStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    returnStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    yieldStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    throwStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.notLineTerminator();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    classElement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.n("static");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    singleExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 27);
    		case 9:
    			return this.precpred(this._ctx, 26);
    		case 10:
    			return this.precpred(this._ctx, 25);
    		case 11:
    			return this.precpred(this._ctx, 24);
    		case 12:
    			return this.precpred(this._ctx, 23);
    		case 13:
    			return this.precpred(this._ctx, 22);
    		case 14:
    			return this.precpred(this._ctx, 21);
    		case 15:
    			return this.precpred(this._ctx, 20);
    		case 16:
    			return this.precpred(this._ctx, 19);
    		case 17:
    			return this.precpred(this._ctx, 18);
    		case 18:
    			return this.precpred(this._ctx, 17);
    		case 19:
    			return this.precpred(this._ctx, 16);
    		case 20:
    			return this.precpred(this._ctx, 15);
    		case 21:
    			return this.precpred(this._ctx, 14);
    		case 22:
    			return this.precpred(this._ctx, 13);
    		case 23:
    			return this.precpred(this._ctx, 12);
    		case 24:
    			return this.precpred(this._ctx, 11);
    		case 25:
    			return this.precpred(this._ctx, 44);
    		case 26:
    			return this.precpred(this._ctx, 43);
    		case 27:
    			return this.precpred(this._ctx, 42);
    		case 28:
    			return this.precpred(this._ctx, 39);
    		case 29:
    			return this.notLineTerminator();
    		case 30:
    			return this.precpred(this._ctx, 38);
    		case 31:
    			return this.notLineTerminator();
    		case 32:
    			return this.precpred(this._ctx, 9);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 33:
    			return this.n("get");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setter_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 34:
    			return this.n("set");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    eos_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return this.lineTerminatorAhead();
    		case 36:
    			return this.closeBrace();
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 151;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 150;
	            this.match(JavaScriptParser.HashBangLine);

	        }
	        this.state = 154;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 153;
	            this.sourceElements();

	        }
	        this.state = 156;
	        this.match(JavaScriptParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 158;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
	    try {
	        this.state = 180;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 160;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 161;
	            this.variableStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 162;
	            this.importStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 163;
	            this.exportStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 164;
	            this.emptyStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 165;
	            this.classDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 166;
	            this.expressionStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 167;
	            this.ifStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 168;
	            this.iterationStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 169;
	            this.continueStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 170;
	            this.breakStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 171;
	            this.returnStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 172;
	            this.yieldStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 173;
	            this.withStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 174;
	            this.labelledStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 175;
	            this.switchStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 176;
	            this.throwStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 177;
	            this.tryStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 178;
	            this.debuggerStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 179;
	            this.functionDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 182;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 183;
	            this.statementList();

	        }
	        this.state = 186;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 188;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 191; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.match(JavaScriptParser.Import);
	        this.state = 194;
	        this.importFromBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFromBlock() {
	    let localctx = new ImportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
	    try {
	        this.state = 208;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.OpenBrace:
	        case JavaScriptParser.Multiply:
	        case JavaScriptParser.NullLiteral:
	        case JavaScriptParser.BooleanLiteral:
	        case JavaScriptParser.Break:
	        case JavaScriptParser.Do:
	        case JavaScriptParser.Instanceof:
	        case JavaScriptParser.Typeof:
	        case JavaScriptParser.Case:
	        case JavaScriptParser.Else:
	        case JavaScriptParser.New:
	        case JavaScriptParser.Var:
	        case JavaScriptParser.Catch:
	        case JavaScriptParser.Finally:
	        case JavaScriptParser.Return:
	        case JavaScriptParser.Void:
	        case JavaScriptParser.Continue:
	        case JavaScriptParser.For:
	        case JavaScriptParser.Switch:
	        case JavaScriptParser.While:
	        case JavaScriptParser.Debugger:
	        case JavaScriptParser.Function:
	        case JavaScriptParser.This:
	        case JavaScriptParser.With:
	        case JavaScriptParser.Default:
	        case JavaScriptParser.If:
	        case JavaScriptParser.Throw:
	        case JavaScriptParser.Delete:
	        case JavaScriptParser.In:
	        case JavaScriptParser.Try:
	        case JavaScriptParser.As:
	        case JavaScriptParser.From:
	        case JavaScriptParser.Class:
	        case JavaScriptParser.Enum:
	        case JavaScriptParser.Extends:
	        case JavaScriptParser.Super:
	        case JavaScriptParser.Const:
	        case JavaScriptParser.Export:
	        case JavaScriptParser.Import:
	        case JavaScriptParser.Async:
	        case JavaScriptParser.Await:
	        case JavaScriptParser.Implements:
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Private:
	        case JavaScriptParser.Public:
	        case JavaScriptParser.Interface:
	        case JavaScriptParser.Package:
	        case JavaScriptParser.Protected:
	        case JavaScriptParser.Static:
	        case JavaScriptParser.Yield:
	        case JavaScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 197;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 196;
	                this.importDefault();

	            }
	            this.state = 201;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case JavaScriptParser.Multiply:
	            case JavaScriptParser.NullLiteral:
	            case JavaScriptParser.BooleanLiteral:
	            case JavaScriptParser.Break:
	            case JavaScriptParser.Do:
	            case JavaScriptParser.Instanceof:
	            case JavaScriptParser.Typeof:
	            case JavaScriptParser.Case:
	            case JavaScriptParser.Else:
	            case JavaScriptParser.New:
	            case JavaScriptParser.Var:
	            case JavaScriptParser.Catch:
	            case JavaScriptParser.Finally:
	            case JavaScriptParser.Return:
	            case JavaScriptParser.Void:
	            case JavaScriptParser.Continue:
	            case JavaScriptParser.For:
	            case JavaScriptParser.Switch:
	            case JavaScriptParser.While:
	            case JavaScriptParser.Debugger:
	            case JavaScriptParser.Function:
	            case JavaScriptParser.This:
	            case JavaScriptParser.With:
	            case JavaScriptParser.Default:
	            case JavaScriptParser.If:
	            case JavaScriptParser.Throw:
	            case JavaScriptParser.Delete:
	            case JavaScriptParser.In:
	            case JavaScriptParser.Try:
	            case JavaScriptParser.As:
	            case JavaScriptParser.From:
	            case JavaScriptParser.Class:
	            case JavaScriptParser.Enum:
	            case JavaScriptParser.Extends:
	            case JavaScriptParser.Super:
	            case JavaScriptParser.Const:
	            case JavaScriptParser.Export:
	            case JavaScriptParser.Import:
	            case JavaScriptParser.Async:
	            case JavaScriptParser.Await:
	            case JavaScriptParser.Implements:
	            case JavaScriptParser.StrictLet:
	            case JavaScriptParser.NonStrictLet:
	            case JavaScriptParser.Private:
	            case JavaScriptParser.Public:
	            case JavaScriptParser.Interface:
	            case JavaScriptParser.Package:
	            case JavaScriptParser.Protected:
	            case JavaScriptParser.Static:
	            case JavaScriptParser.Yield:
	            case JavaScriptParser.Identifier:
	                this.state = 199;
	                this.importNamespace();
	                break;
	            case JavaScriptParser.OpenBrace:
	                this.state = 200;
	                this.moduleItems();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 203;
	            this.importFrom();
	            this.state = 204;
	            this.eos();
	            break;
	        case JavaScriptParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 206;
	            this.match(JavaScriptParser.StringLiteral);
	            this.state = 207;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleItems() {
	    let localctx = new ModuleItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, JavaScriptParser.RULE_moduleItems);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 210;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 216;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 211;
	                this.aliasName();
	                this.state = 212;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 218;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	        this.state = 223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.Break - 59)) | (1 << (JavaScriptParser.Do - 59)) | (1 << (JavaScriptParser.Instanceof - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.Case - 59)) | (1 << (JavaScriptParser.Else - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Var - 59)) | (1 << (JavaScriptParser.Catch - 59)) | (1 << (JavaScriptParser.Finally - 59)) | (1 << (JavaScriptParser.Return - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Continue - 59)) | (1 << (JavaScriptParser.For - 59)) | (1 << (JavaScriptParser.Switch - 59)) | (1 << (JavaScriptParser.While - 59)) | (1 << (JavaScriptParser.Debugger - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)) | (1 << (JavaScriptParser.With - 59)) | (1 << (JavaScriptParser.Default - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (JavaScriptParser.If - 91)) | (1 << (JavaScriptParser.Throw - 91)) | (1 << (JavaScriptParser.Delete - 91)) | (1 << (JavaScriptParser.In - 91)) | (1 << (JavaScriptParser.Try - 91)) | (1 << (JavaScriptParser.As - 91)) | (1 << (JavaScriptParser.From - 91)) | (1 << (JavaScriptParser.Class - 91)) | (1 << (JavaScriptParser.Enum - 91)) | (1 << (JavaScriptParser.Extends - 91)) | (1 << (JavaScriptParser.Super - 91)) | (1 << (JavaScriptParser.Const - 91)) | (1 << (JavaScriptParser.Export - 91)) | (1 << (JavaScriptParser.Import - 91)) | (1 << (JavaScriptParser.Async - 91)) | (1 << (JavaScriptParser.Await - 91)) | (1 << (JavaScriptParser.Implements - 91)) | (1 << (JavaScriptParser.StrictLet - 91)) | (1 << (JavaScriptParser.NonStrictLet - 91)) | (1 << (JavaScriptParser.Private - 91)) | (1 << (JavaScriptParser.Public - 91)) | (1 << (JavaScriptParser.Interface - 91)) | (1 << (JavaScriptParser.Package - 91)) | (1 << (JavaScriptParser.Protected - 91)) | (1 << (JavaScriptParser.Static - 91)) | (1 << (JavaScriptParser.Yield - 91)) | (1 << (JavaScriptParser.Identifier - 91)))) !== 0)) {
	            this.state = 219;
	            this.aliasName();
	            this.state = 221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Comma) {
	                this.state = 220;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 225;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDefault() {
	    let localctx = new ImportDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, JavaScriptParser.RULE_importDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227;
	        this.aliasName();
	        this.state = 228;
	        this.match(JavaScriptParser.Comma);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importNamespace() {
	    let localctx = new ImportNamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, JavaScriptParser.RULE_importNamespace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 232;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Multiply:
	            this.state = 230;
	            this.match(JavaScriptParser.Multiply);
	            break;
	        case JavaScriptParser.NullLiteral:
	        case JavaScriptParser.BooleanLiteral:
	        case JavaScriptParser.Break:
	        case JavaScriptParser.Do:
	        case JavaScriptParser.Instanceof:
	        case JavaScriptParser.Typeof:
	        case JavaScriptParser.Case:
	        case JavaScriptParser.Else:
	        case JavaScriptParser.New:
	        case JavaScriptParser.Var:
	        case JavaScriptParser.Catch:
	        case JavaScriptParser.Finally:
	        case JavaScriptParser.Return:
	        case JavaScriptParser.Void:
	        case JavaScriptParser.Continue:
	        case JavaScriptParser.For:
	        case JavaScriptParser.Switch:
	        case JavaScriptParser.While:
	        case JavaScriptParser.Debugger:
	        case JavaScriptParser.Function:
	        case JavaScriptParser.This:
	        case JavaScriptParser.With:
	        case JavaScriptParser.Default:
	        case JavaScriptParser.If:
	        case JavaScriptParser.Throw:
	        case JavaScriptParser.Delete:
	        case JavaScriptParser.In:
	        case JavaScriptParser.Try:
	        case JavaScriptParser.As:
	        case JavaScriptParser.From:
	        case JavaScriptParser.Class:
	        case JavaScriptParser.Enum:
	        case JavaScriptParser.Extends:
	        case JavaScriptParser.Super:
	        case JavaScriptParser.Const:
	        case JavaScriptParser.Export:
	        case JavaScriptParser.Import:
	        case JavaScriptParser.Async:
	        case JavaScriptParser.Await:
	        case JavaScriptParser.Implements:
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Private:
	        case JavaScriptParser.Public:
	        case JavaScriptParser.Interface:
	        case JavaScriptParser.Package:
	        case JavaScriptParser.Protected:
	        case JavaScriptParser.Static:
	        case JavaScriptParser.Yield:
	        case JavaScriptParser.Identifier:
	            this.state = 231;
	            this.identifierName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.As) {
	            this.state = 234;
	            this.match(JavaScriptParser.As);
	            this.state = 235;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importFrom() {
	    let localctx = new ImportFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, JavaScriptParser.RULE_importFrom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 238;
	        this.match(JavaScriptParser.From);
	        this.state = 239;
	        this.match(JavaScriptParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasName() {
	    let localctx = new AliasNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, JavaScriptParser.RULE_aliasName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 241;
	        this.identifierName();
	        this.state = 244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.As) {
	            this.state = 242;
	            this.match(JavaScriptParser.As);
	            this.state = 243;
	            this.identifierName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, JavaScriptParser.RULE_exportStatement);
	    try {
	        this.state = 258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExportDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 246;
	            this.match(JavaScriptParser.Export);
	            this.state = 249;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 247;
	                this.exportFromBlock();
	                break;

	            case 2:
	                this.state = 248;
	                this.declaration();
	                break;

	            }
	            this.state = 251;
	            this.eos();
	            break;

	        case 2:
	            localctx = new ExportDefaultDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 253;
	            this.match(JavaScriptParser.Export);
	            this.state = 254;
	            this.match(JavaScriptParser.Default);
	            this.state = 255;
	            this.singleExpression(0);
	            this.state = 256;
	            this.eos();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportFromBlock() {
	    let localctx = new ExportFromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, JavaScriptParser.RULE_exportFromBlock);
	    try {
	        this.state = 270;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Multiply:
	        case JavaScriptParser.NullLiteral:
	        case JavaScriptParser.BooleanLiteral:
	        case JavaScriptParser.Break:
	        case JavaScriptParser.Do:
	        case JavaScriptParser.Instanceof:
	        case JavaScriptParser.Typeof:
	        case JavaScriptParser.Case:
	        case JavaScriptParser.Else:
	        case JavaScriptParser.New:
	        case JavaScriptParser.Var:
	        case JavaScriptParser.Catch:
	        case JavaScriptParser.Finally:
	        case JavaScriptParser.Return:
	        case JavaScriptParser.Void:
	        case JavaScriptParser.Continue:
	        case JavaScriptParser.For:
	        case JavaScriptParser.Switch:
	        case JavaScriptParser.While:
	        case JavaScriptParser.Debugger:
	        case JavaScriptParser.Function:
	        case JavaScriptParser.This:
	        case JavaScriptParser.With:
	        case JavaScriptParser.Default:
	        case JavaScriptParser.If:
	        case JavaScriptParser.Throw:
	        case JavaScriptParser.Delete:
	        case JavaScriptParser.In:
	        case JavaScriptParser.Try:
	        case JavaScriptParser.As:
	        case JavaScriptParser.From:
	        case JavaScriptParser.Class:
	        case JavaScriptParser.Enum:
	        case JavaScriptParser.Extends:
	        case JavaScriptParser.Super:
	        case JavaScriptParser.Const:
	        case JavaScriptParser.Export:
	        case JavaScriptParser.Import:
	        case JavaScriptParser.Async:
	        case JavaScriptParser.Await:
	        case JavaScriptParser.Implements:
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Private:
	        case JavaScriptParser.Public:
	        case JavaScriptParser.Interface:
	        case JavaScriptParser.Package:
	        case JavaScriptParser.Protected:
	        case JavaScriptParser.Static:
	        case JavaScriptParser.Yield:
	        case JavaScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 260;
	            this.importNamespace();
	            this.state = 261;
	            this.importFrom();
	            this.state = 262;
	            this.eos();
	            break;
	        case JavaScriptParser.OpenBrace:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 264;
	            this.moduleItems();
	            this.state = 266;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 265;
	                this.importFrom();

	            }
	            this.state = 268;
	            this.eos();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, JavaScriptParser.RULE_declaration);
	    try {
	        this.state = 275;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Var:
	        case JavaScriptParser.Const:
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 272;
	            this.variableStatement();
	            break;
	        case JavaScriptParser.Class:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 273;
	            this.classDeclaration();
	            break;
	        case JavaScriptParser.Function:
	        case JavaScriptParser.Async:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 274;
	            this.functionDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableStatement() {
	    let localctx = new VariableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, JavaScriptParser.RULE_variableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this.variableDeclarationList();
	        this.state = 278;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, JavaScriptParser.RULE_variableDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        this.varModifier();
	        this.state = 281;
	        this.variableDeclaration();
	        this.state = 286;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 282;
	                this.match(JavaScriptParser.Comma);
	                this.state = 283;
	                this.variableDeclaration(); 
	            }
	            this.state = 288;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, JavaScriptParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.assignable();
	        this.state = 292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 290;
	            this.match(JavaScriptParser.Assign);
	            this.state = 291;
	            this.singleExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, JavaScriptParser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        this.match(JavaScriptParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, JavaScriptParser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 296;
	        if (!( this.notOpenBraceAndNotFunction())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
	        }
	        this.state = 297;
	        this.expressionSequence();
	        this.state = 298;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, JavaScriptParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this.match(JavaScriptParser.If);
	        this.state = 301;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 302;
	        this.expressionSequence();
	        this.state = 303;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 304;
	        this.statement();
	        this.state = 307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 305;
	            this.match(JavaScriptParser.Else);
	            this.state = 306;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, JavaScriptParser.RULE_iterationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 309;
	            this.match(JavaScriptParser.Do);
	            this.state = 310;
	            this.statement();
	            this.state = 311;
	            this.match(JavaScriptParser.While);
	            this.state = 312;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 313;
	            this.expressionSequence();
	            this.state = 314;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 315;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 317;
	            this.match(JavaScriptParser.While);
	            this.state = 318;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 319;
	            this.expressionSequence();
	            this.state = 320;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 321;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 323;
	            this.match(JavaScriptParser.For);
	            this.state = 324;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 327;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 325;
	                this.expressionSequence();

	            } else if(la_===2) {
	                this.state = 326;
	                this.variableDeclarationList();

	            }
	            this.state = 329;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 331;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.NonStrictLet - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
	                this.state = 330;
	                this.expressionSequence();
	            }

	            this.state = 333;
	            this.match(JavaScriptParser.SemiColon);
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.NonStrictLet - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
	                this.state = 334;
	                this.expressionSequence();
	            }

	            this.state = 337;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 338;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 339;
	            this.match(JavaScriptParser.For);
	            this.state = 340;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 341;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 342;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 345;
	            this.match(JavaScriptParser.In);
	            this.state = 346;
	            this.expressionSequence();
	            this.state = 347;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 348;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForOfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 350;
	            this.match(JavaScriptParser.For);
	            this.state = 352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Await) {
	                this.state = 351;
	                this.match(JavaScriptParser.Await);
	            }

	            this.state = 354;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 357;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 355;
	                this.singleExpression(0);
	                break;

	            case 2:
	                this.state = 356;
	                this.variableDeclarationList();
	                break;

	            }
	            this.state = 359;
	            this.identifier();
	            this.state = 360;
	            if (!( this.p("of"))) {
	                throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
	            }
	            this.state = 361;
	            this.expressionSequence();
	            this.state = 362;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 363;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, JavaScriptParser.RULE_varModifier);
	    try {
	        this.state = 370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Var:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 367;
	            this.match(JavaScriptParser.Var);
	            break;
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 368;
	            this.let_();
	            break;
	        case JavaScriptParser.Const:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 369;
	            this.match(JavaScriptParser.Const);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, JavaScriptParser.RULE_continueStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this.match(JavaScriptParser.Continue);
	        this.state = 375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        if(la_===1) {
	            this.state = 373;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 374;
	            this.identifier();

	        }
	        this.state = 377;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, JavaScriptParser.RULE_breakStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 379;
	        this.match(JavaScriptParser.Break);
	        this.state = 382;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 380;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 381;
	            this.identifier();

	        }
	        this.state = 384;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, JavaScriptParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 386;
	        this.match(JavaScriptParser.Return);
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 387;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 388;
	            this.expressionSequence();

	        }
	        this.state = 391;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, JavaScriptParser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this.match(JavaScriptParser.Yield);
	        this.state = 396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 394;
	            if (!( this.notLineTerminator())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	            }
	            this.state = 395;
	            this.expressionSequence();

	        }
	        this.state = 398;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, JavaScriptParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 400;
	        this.match(JavaScriptParser.With);
	        this.state = 401;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 402;
	        this.expressionSequence();
	        this.state = 403;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 404;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, JavaScriptParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.match(JavaScriptParser.Switch);
	        this.state = 407;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 408;
	        this.expressionSequence();
	        this.state = 409;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 410;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, JavaScriptParser.RULE_caseBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Case) {
	            this.state = 413;
	            this.caseClauses();
	        }

	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Default) {
	            this.state = 416;
	            this.defaultClause();
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Case) {
	                this.state = 417;
	                this.caseClauses();
	            }

	        }

	        this.state = 422;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, JavaScriptParser.RULE_caseClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 424;
	            this.caseClause();
	            this.state = 427; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===JavaScriptParser.Case);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, JavaScriptParser.RULE_caseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 429;
	        this.match(JavaScriptParser.Case);
	        this.state = 430;
	        this.expressionSequence();
	        this.state = 431;
	        this.match(JavaScriptParser.Colon);
	        this.state = 433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 432;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, JavaScriptParser.RULE_defaultClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 435;
	        this.match(JavaScriptParser.Default);
	        this.state = 436;
	        this.match(JavaScriptParser.Colon);
	        this.state = 438;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 437;
	            this.statementList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, JavaScriptParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.identifier();
	        this.state = 441;
	        this.match(JavaScriptParser.Colon);
	        this.state = 442;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, JavaScriptParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this.match(JavaScriptParser.Throw);
	        this.state = 445;
	        if (!( this.notLineTerminator())) {
	            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	        }
	        this.state = 446;
	        this.expressionSequence();
	        this.state = 447;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, JavaScriptParser.RULE_tryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.match(JavaScriptParser.Try);
	        this.state = 450;
	        this.block();
	        this.state = 456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Catch:
	            this.state = 451;
	            this.catchProduction();
	            this.state = 453;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 452;
	                this.finallyProduction();

	            }
	            break;
	        case JavaScriptParser.Finally:
	            this.state = 455;
	            this.finallyProduction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, JavaScriptParser.RULE_catchProduction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.match(JavaScriptParser.Catch);
	        this.state = 464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.OpenParen) {
	            this.state = 459;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.OpenBracket || _la===JavaScriptParser.OpenBrace || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 460;
	                this.assignable();
	            }

	            this.state = 463;
	            this.match(JavaScriptParser.CloseParen);
	        }

	        this.state = 466;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, JavaScriptParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        this.match(JavaScriptParser.Finally);
	        this.state = 469;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, JavaScriptParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 471;
	        this.match(JavaScriptParser.Debugger);
	        this.state = 472;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDeclaration() {
	    let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, JavaScriptParser.RULE_functionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Async) {
	            this.state = 474;
	            this.match(JavaScriptParser.Async);
	        }

	        this.state = 477;
	        this.match(JavaScriptParser.Function);
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Multiply) {
	            this.state = 478;
	            this.match(JavaScriptParser.Multiply);
	        }

	        this.state = 481;
	        this.identifier();
	        this.state = 482;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	            this.state = 483;
	            this.formalParameterList();
	        }

	        this.state = 486;
	        this.match(JavaScriptParser.CloseParen);
	        this.state = 487;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 488;
	        this.functionBody();
	        this.state = 489;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, JavaScriptParser.RULE_classDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.match(JavaScriptParser.Class);
	        this.state = 492;
	        this.identifier();
	        this.state = 493;
	        this.classTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTail() {
	    let localctx = new ClassTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, JavaScriptParser.RULE_classTail);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Extends) {
	            this.state = 495;
	            this.match(JavaScriptParser.Extends);
	            this.state = 496;
	            this.singleExpression(0);
	        }

	        this.state = 499;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 503;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 500;
	                this.classElement(); 
	            }
	            this.state = 505;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
	        }

	        this.state = 506;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classElement() {
	    let localctx = new ClassElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, JavaScriptParser.RULE_classElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 514;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 512;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 508;
	                        this.match(JavaScriptParser.Static);
	                        break;

	                    case 2:
	                        this.state = 509;
	                        if (!( this.n("static"))) {
	                            throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
	                        }
	                        this.state = 510;
	                        this.identifier();
	                        break;

	                    case 3:
	                        this.state = 511;
	                        this.match(JavaScriptParser.Async);
	                        break;

	                    } 
	                }
	                this.state = 516;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
	            }

	            this.state = 523;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 517;
	                this.methodDefinition();
	                break;

	            case 2:
	                this.state = 518;
	                this.assignable();
	                this.state = 519;
	                this.match(JavaScriptParser.Assign);
	                this.state = 520;
	                this.objectLiteral();
	                this.state = 521;
	                this.match(JavaScriptParser.SemiColon);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 525;
	            this.emptyStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 527;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Hashtag) {
	                this.state = 526;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 529;
	            this.propertyName();
	            this.state = 530;
	            this.match(JavaScriptParser.Assign);
	            this.state = 531;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinition() {
	    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, JavaScriptParser.RULE_methodDefinition);
	    var _la = 0; // Token type
	    try {
	        this.state = 580;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 536;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Multiply) {
	                this.state = 535;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 539;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Hashtag) {
	                this.state = 538;
	                this.match(JavaScriptParser.Hashtag);
	            }

	            this.state = 541;
	            this.propertyName();
	            this.state = 542;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 543;
	                this.formalParameterList();
	            }

	            this.state = 546;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 547;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 548;
	            this.functionBody();
	            this.state = 549;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 552;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	            if(la_===1) {
	                this.state = 551;
	                this.match(JavaScriptParser.Multiply);

	            }
	            this.state = 555;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            if(la_===1) {
	                this.state = 554;
	                this.match(JavaScriptParser.Hashtag);

	            }
	            this.state = 557;
	            this.getter();
	            this.state = 558;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 559;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 560;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 561;
	            this.functionBody();
	            this.state = 562;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 565;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            if(la_===1) {
	                this.state = 564;
	                this.match(JavaScriptParser.Multiply);

	            }
	            this.state = 568;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	            if(la_===1) {
	                this.state = 567;
	                this.match(JavaScriptParser.Hashtag);

	            }
	            this.state = 570;
	            this.setter();
	            this.state = 571;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 572;
	                this.formalParameterList();
	            }

	            this.state = 575;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 576;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 577;
	            this.functionBody();
	            this.state = 578;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, JavaScriptParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.state = 595;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.OpenBracket:
	        case JavaScriptParser.OpenBrace:
	        case JavaScriptParser.Async:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 582;
	            this.formalParameterArg();
	            this.state = 587;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 583;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 584;
	                    this.formalParameterArg(); 
	                }
	                this.state = 589;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	            }

	            this.state = 592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Comma) {
	                this.state = 590;
	                this.match(JavaScriptParser.Comma);
	                this.state = 591;
	                this.lastFormalParameterArg();
	            }

	            break;
	        case JavaScriptParser.Ellipsis:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 594;
	            this.lastFormalParameterArg();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, JavaScriptParser.RULE_formalParameterArg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 597;
	        this.assignable();
	        this.state = 600;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Assign) {
	            this.state = 598;
	            this.match(JavaScriptParser.Assign);
	            this.state = 599;
	            this.singleExpression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameterArg() {
	    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, JavaScriptParser.RULE_lastFormalParameterArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(JavaScriptParser.Ellipsis);
	        this.state = 603;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, JavaScriptParser.RULE_functionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 605;
	            this.sourceElements();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElements() {
	    let localctx = new SourceElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, JavaScriptParser.RULE_sourceElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 608;
	        		this.sourceElement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 611; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, JavaScriptParser.RULE_arrayLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.match(JavaScriptParser.OpenBracket);
	        this.state = 614;
	        this.elementList();
	        this.state = 615;
	        this.match(JavaScriptParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, JavaScriptParser.RULE_elementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 617;
	                this.match(JavaScriptParser.Comma); 
	            }
	            this.state = 622;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
	        }

	        this.state = 624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.NonStrictLet - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
	            this.state = 623;
	            this.arrayElement();
	        }

	        this.state = 634;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 627; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 626;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 629; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===JavaScriptParser.Comma);
	                this.state = 631;
	                this.arrayElement(); 
	            }
	            this.state = 636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	        }

	        this.state = 640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===JavaScriptParser.Comma) {
	            this.state = 637;
	            this.match(JavaScriptParser.Comma);
	            this.state = 642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayElement() {
	    let localctx = new ArrayElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrayElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Ellipsis) {
	            this.state = 643;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 646;
	        this.singleExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, JavaScriptParser.RULE_propertyAssignment);
	    var _la = 0; // Token type
	    try {
	        this.state = 693;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 648;
	            this.propertyName();
	            this.state = 649;
	            this.match(JavaScriptParser.Colon);
	            this.state = 650;
	            this.singleExpression(0);
	            break;

	        case 2:
	            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 652;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 653;
	            this.singleExpression(0);
	            this.state = 654;
	            this.match(JavaScriptParser.CloseBracket);
	            this.state = 655;
	            this.match(JavaScriptParser.Colon);
	            this.state = 656;
	            this.singleExpression(0);
	            break;

	        case 3:
	            localctx = new FunctionPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 659;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	            if(la_===1) {
	                this.state = 658;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Multiply) {
	                this.state = 661;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 664;
	            this.propertyName();
	            this.state = 665;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 666;
	                this.formalParameterList();
	            }

	            this.state = 669;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 670;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 671;
	            this.functionBody();
	            this.state = 672;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 4:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 674;
	            this.getter();
	            this.state = 675;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 676;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 677;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 678;
	            this.functionBody();
	            this.state = 679;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 5:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 681;
	            this.setter();
	            this.state = 682;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 683;
	            this.formalParameterArg();
	            this.state = 684;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 685;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 686;
	            this.functionBody();
	            this.state = 687;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 6:
	            localctx = new PropertyShorthandContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Ellipsis) {
	                this.state = 689;
	                this.match(JavaScriptParser.Ellipsis);
	            }

	            this.state = 692;
	            this.singleExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, JavaScriptParser.RULE_propertyName);
	    try {
	        this.state = 702;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.NullLiteral:
	        case JavaScriptParser.BooleanLiteral:
	        case JavaScriptParser.Break:
	        case JavaScriptParser.Do:
	        case JavaScriptParser.Instanceof:
	        case JavaScriptParser.Typeof:
	        case JavaScriptParser.Case:
	        case JavaScriptParser.Else:
	        case JavaScriptParser.New:
	        case JavaScriptParser.Var:
	        case JavaScriptParser.Catch:
	        case JavaScriptParser.Finally:
	        case JavaScriptParser.Return:
	        case JavaScriptParser.Void:
	        case JavaScriptParser.Continue:
	        case JavaScriptParser.For:
	        case JavaScriptParser.Switch:
	        case JavaScriptParser.While:
	        case JavaScriptParser.Debugger:
	        case JavaScriptParser.Function:
	        case JavaScriptParser.This:
	        case JavaScriptParser.With:
	        case JavaScriptParser.Default:
	        case JavaScriptParser.If:
	        case JavaScriptParser.Throw:
	        case JavaScriptParser.Delete:
	        case JavaScriptParser.In:
	        case JavaScriptParser.Try:
	        case JavaScriptParser.As:
	        case JavaScriptParser.From:
	        case JavaScriptParser.Class:
	        case JavaScriptParser.Enum:
	        case JavaScriptParser.Extends:
	        case JavaScriptParser.Super:
	        case JavaScriptParser.Const:
	        case JavaScriptParser.Export:
	        case JavaScriptParser.Import:
	        case JavaScriptParser.Async:
	        case JavaScriptParser.Await:
	        case JavaScriptParser.Implements:
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Private:
	        case JavaScriptParser.Public:
	        case JavaScriptParser.Interface:
	        case JavaScriptParser.Package:
	        case JavaScriptParser.Protected:
	        case JavaScriptParser.Static:
	        case JavaScriptParser.Yield:
	        case JavaScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 695;
	            this.identifierName();
	            break;
	        case JavaScriptParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 696;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case JavaScriptParser.DecimalLiteral:
	        case JavaScriptParser.HexIntegerLiteral:
	        case JavaScriptParser.OctalIntegerLiteral:
	        case JavaScriptParser.OctalIntegerLiteral2:
	        case JavaScriptParser.BinaryIntegerLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 697;
	            this.numericLiteral();
	            break;
	        case JavaScriptParser.OpenBracket:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 698;
	            this.match(JavaScriptParser.OpenBracket);
	            this.state = 699;
	            this.singleExpression(0);
	            this.state = 700;
	            this.match(JavaScriptParser.CloseBracket);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, JavaScriptParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this.match(JavaScriptParser.OpenParen);
	        this.state = 716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.NonStrictLet - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
	            this.state = 705;
	            this.argument();
	            this.state = 710;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 706;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 707;
	                    this.argument(); 
	                }
	                this.state = 712;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
	            }

	            this.state = 714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Comma) {
	                this.state = 713;
	                this.match(JavaScriptParser.Comma);
	            }

	        }

	        this.state = 718;
	        this.match(JavaScriptParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, JavaScriptParser.RULE_argument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Ellipsis) {
	            this.state = 720;
	            this.match(JavaScriptParser.Ellipsis);
	        }

	        this.state = 725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 723;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.state = 724;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, JavaScriptParser.RULE_expressionSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.singleExpression(0);
	        this.state = 732;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 728;
	                this.match(JavaScriptParser.Comma);
	                this.state = 729;
	                this.singleExpression(0); 
	            }
	            this.state = 734;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	singleExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SingleExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, JavaScriptParser.RULE_singleExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 736;
	            this.anoymousFunction();
	            break;

	        case 2:
	            localctx = new ClassExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 737;
	            this.match(JavaScriptParser.Class);
	            this.state = 739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 738;
	                this.identifier();
	            }

	            this.state = 741;
	            this.classTail();
	            break;

	        case 3:
	            localctx = new NewExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 742;
	            this.match(JavaScriptParser.New);
	            this.state = 743;
	            this.singleExpression(0);
	            this.state = 745;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 744;
	                this.arguments();

	            }
	            break;

	        case 4:
	            localctx = new MetaExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 747;
	            this.match(JavaScriptParser.New);
	            this.state = 748;
	            this.match(JavaScriptParser.Dot);
	            this.state = 749;
	            this.identifier();
	            break;

	        case 5:
	            localctx = new DeleteExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 750;
	            this.match(JavaScriptParser.Delete);
	            this.state = 751;
	            this.singleExpression(37);
	            break;

	        case 6:
	            localctx = new VoidExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 752;
	            this.match(JavaScriptParser.Void);
	            this.state = 753;
	            this.singleExpression(36);
	            break;

	        case 7:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 754;
	            this.match(JavaScriptParser.Typeof);
	            this.state = 755;
	            this.singleExpression(35);
	            break;

	        case 8:
	            localctx = new PreIncrementExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 756;
	            this.match(JavaScriptParser.PlusPlus);
	            this.state = 757;
	            this.singleExpression(34);
	            break;

	        case 9:
	            localctx = new PreDecreaseExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 758;
	            this.match(JavaScriptParser.MinusMinus);
	            this.state = 759;
	            this.singleExpression(33);
	            break;

	        case 10:
	            localctx = new UnaryPlusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 760;
	            this.match(JavaScriptParser.Plus);
	            this.state = 761;
	            this.singleExpression(32);
	            break;

	        case 11:
	            localctx = new UnaryMinusExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 762;
	            this.match(JavaScriptParser.Minus);
	            this.state = 763;
	            this.singleExpression(31);
	            break;

	        case 12:
	            localctx = new BitNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 764;
	            this.match(JavaScriptParser.BitNot);
	            this.state = 765;
	            this.singleExpression(30);
	            break;

	        case 13:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 766;
	            this.match(JavaScriptParser.Not);
	            this.state = 767;
	            this.singleExpression(29);
	            break;

	        case 14:
	            localctx = new AwaitExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 768;
	            this.match(JavaScriptParser.Await);
	            this.state = 769;
	            this.singleExpression(28);
	            break;

	        case 15:
	            localctx = new ImportExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 770;
	            this.match(JavaScriptParser.Import);
	            this.state = 771;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 772;
	            this.singleExpression(0);
	            this.state = 773;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        case 16:
	            localctx = new YieldExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 775;
	            this.yieldStatement();
	            break;

	        case 17:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 776;
	            this.match(JavaScriptParser.This);
	            break;

	        case 18:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 777;
	            this.identifier();
	            break;

	        case 19:
	            localctx = new SuperExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 778;
	            this.match(JavaScriptParser.Super);
	            break;

	        case 20:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 779;
	            this.literal();
	            break;

	        case 21:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 780;
	            this.arrayLiteral();
	            break;

	        case 22:
	            localctx = new ObjectLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 781;
	            this.objectLiteral();
	            break;

	        case 23:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 782;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 783;
	            this.expressionSequence();
	            this.state = 784;
	            this.match(JavaScriptParser.CloseParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 869;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 867;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 788;
	                    if (!( this.precpred(this._ctx, 27))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
	                    }
	                    this.state = 789;
	                    this.match(JavaScriptParser.Power);
	                    this.state = 790;
	                    this.singleExpression(27);
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 791;
	                    if (!( this.precpred(this._ctx, 26))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
	                    }
	                    this.state = 792;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.Multiply) | (1 << JavaScriptParser.Divide) | (1 << JavaScriptParser.Modulus))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 793;
	                    this.singleExpression(27);
	                    break;

	                case 3:
	                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 794;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 795;
	                    _la = this._input.LA(1);
	                    if(!(_la===JavaScriptParser.Plus || _la===JavaScriptParser.Minus)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 796;
	                    this.singleExpression(26);
	                    break;

	                case 4:
	                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 797;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 798;
	                    this.match(JavaScriptParser.NullCoalesce);
	                    this.state = 799;
	                    this.singleExpression(25);
	                    break;

	                case 5:
	                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 800;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 801;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (JavaScriptParser.RightShiftArithmetic - 30)) | (1 << (JavaScriptParser.LeftShiftArithmetic - 30)) | (1 << (JavaScriptParser.RightShiftLogical - 30)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 802;
	                    this.singleExpression(24);
	                    break;

	                case 6:
	                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 803;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 804;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (JavaScriptParser.LessThan - 33)) | (1 << (JavaScriptParser.MoreThan - 33)) | (1 << (JavaScriptParser.LessThanEquals - 33)) | (1 << (JavaScriptParser.GreaterThanEquals - 33)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 805;
	                    this.singleExpression(23);
	                    break;

	                case 7:
	                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 806;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 807;
	                    this.match(JavaScriptParser.Instanceof);
	                    this.state = 808;
	                    this.singleExpression(22);
	                    break;

	                case 8:
	                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 809;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 810;
	                    this.match(JavaScriptParser.In);
	                    this.state = 811;
	                    this.singleExpression(21);
	                    break;

	                case 9:
	                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 812;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 813;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (JavaScriptParser.Equals_ - 37)) | (1 << (JavaScriptParser.NotEquals - 37)) | (1 << (JavaScriptParser.IdentityEquals - 37)) | (1 << (JavaScriptParser.IdentityNotEquals - 37)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 814;
	                    this.singleExpression(20);
	                    break;

	                case 10:
	                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 815;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 816;
	                    this.match(JavaScriptParser.BitAnd);
	                    this.state = 817;
	                    this.singleExpression(19);
	                    break;

	                case 11:
	                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 818;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 819;
	                    this.match(JavaScriptParser.BitXOr);
	                    this.state = 820;
	                    this.singleExpression(18);
	                    break;

	                case 12:
	                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 821;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 822;
	                    this.match(JavaScriptParser.BitOr);
	                    this.state = 823;
	                    this.singleExpression(17);
	                    break;

	                case 13:
	                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 824;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 825;
	                    this.match(JavaScriptParser.And);
	                    this.state = 826;
	                    this.singleExpression(16);
	                    break;

	                case 14:
	                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 827;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 828;
	                    this.match(JavaScriptParser.Or);
	                    this.state = 829;
	                    this.singleExpression(15);
	                    break;

	                case 15:
	                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 830;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 831;
	                    this.match(JavaScriptParser.QuestionMark);
	                    this.state = 832;
	                    this.singleExpression(0);
	                    this.state = 833;
	                    this.match(JavaScriptParser.Colon);
	                    this.state = 834;
	                    this.singleExpression(14);
	                    break;

	                case 16:
	                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 836;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 837;
	                    this.match(JavaScriptParser.Assign);
	                    this.state = 838;
	                    this.singleExpression(12);
	                    break;

	                case 17:
	                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 839;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 840;
	                    this.assignmentOperator();
	                    this.state = 841;
	                    this.singleExpression(11);
	                    break;

	                case 18:
	                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 843;
	                    if (!( this.precpred(this._ctx, 44))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
	                    }
	                    this.state = 844;
	                    this.match(JavaScriptParser.OpenBracket);
	                    this.state = 845;
	                    this.expressionSequence();
	                    this.state = 846;
	                    this.match(JavaScriptParser.CloseBracket);
	                    break;

	                case 19:
	                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 848;
	                    if (!( this.precpred(this._ctx, 43))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 43)");
	                    }
	                    this.state = 850;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===JavaScriptParser.QuestionMark) {
	                        this.state = 849;
	                        this.match(JavaScriptParser.QuestionMark);
	                    }

	                    this.state = 852;
	                    this.match(JavaScriptParser.Dot);
	                    this.state = 854;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===JavaScriptParser.Hashtag) {
	                        this.state = 853;
	                        this.match(JavaScriptParser.Hashtag);
	                    }

	                    this.state = 856;
	                    this.identifierName();
	                    break;

	                case 20:
	                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 857;
	                    if (!( this.precpred(this._ctx, 42))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 42)");
	                    }
	                    this.state = 858;
	                    this.arguments();
	                    break;

	                case 21:
	                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 859;
	                    if (!( this.precpred(this._ctx, 39))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
	                    }
	                    this.state = 860;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 861;
	                    this.match(JavaScriptParser.PlusPlus);
	                    break;

	                case 22:
	                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 862;
	                    if (!( this.precpred(this._ctx, 38))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
	                    }
	                    this.state = 863;
	                    if (!( this.notLineTerminator())) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
	                    }
	                    this.state = 864;
	                    this.match(JavaScriptParser.MinusMinus);
	                    break;

	                case 23:
	                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
	                    this.state = 865;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 866;
	                    this.match(JavaScriptParser.TemplateStringLiteral);
	                    break;

	                } 
	            }
	            this.state = 871;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assignable() {
	    let localctx = new AssignableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, JavaScriptParser.RULE_assignable);
	    try {
	        this.state = 875;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Async:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 872;
	            this.identifier();
	            break;
	        case JavaScriptParser.OpenBracket:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 873;
	            this.arrayLiteral();
	            break;
	        case JavaScriptParser.OpenBrace:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 874;
	            this.objectLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, JavaScriptParser.RULE_objectLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.match(JavaScriptParser.OpenBrace);
	        this.state = 886;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        if(la_===1) {
	            this.state = 878;
	            this.propertyAssignment();
	            this.state = 883;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 879;
	                    this.match(JavaScriptParser.Comma);
	                    this.state = 880;
	                    this.propertyAssignment(); 
	                }
	                this.state = 885;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	            }


	        }
	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===JavaScriptParser.Comma) {
	            this.state = 888;
	            this.match(JavaScriptParser.Comma);
	        }

	        this.state = 891;
	        this.match(JavaScriptParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anoymousFunction() {
	    let localctx = new AnoymousFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, JavaScriptParser.RULE_anoymousFunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.functionDeclaration();
	            break;

	        case 2:
	            localctx = new AnoymousFunctionDeclContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 895;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Async) {
	                this.state = 894;
	                this.match(JavaScriptParser.Async);
	            }

	            this.state = 897;
	            this.match(JavaScriptParser.Function);
	            this.state = 899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===JavaScriptParser.Multiply) {
	                this.state = 898;
	                this.match(JavaScriptParser.Multiply);
	            }

	            this.state = 901;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 903;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 902;
	                this.formalParameterList();
	            }

	            this.state = 905;
	            this.match(JavaScriptParser.CloseParen);
	            this.state = 906;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 907;
	            this.functionBody();
	            this.state = 908;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        case 3:
	            localctx = new ArrowFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 911;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	            if(la_===1) {
	                this.state = 910;
	                this.match(JavaScriptParser.Async);

	            }
	            this.state = 913;
	            this.arrowFunctionParameters();
	            this.state = 914;
	            this.match(JavaScriptParser.ARROW);
	            this.state = 915;
	            this.arrowFunctionBody();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, JavaScriptParser.RULE_arrowFunctionParameters);
	    var _la = 0; // Token type
	    try {
	        this.state = 925;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Async:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 919;
	            this.identifier();
	            break;
	        case JavaScriptParser.OpenParen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 920;
	            this.match(JavaScriptParser.OpenParen);
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0)) {
	                this.state = 921;
	                this.formalParameterList();
	            }

	            this.state = 924;
	            this.match(JavaScriptParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, JavaScriptParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 927;
	            this.singleExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 928;
	            this.match(JavaScriptParser.OpenBrace);
	            this.state = 929;
	            this.functionBody();
	            this.state = 930;
	            this.match(JavaScriptParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, JavaScriptParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 934;
	        _la = this._input.LA(1);
	        if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (JavaScriptParser.MultiplyAssign - 46)) | (1 << (JavaScriptParser.DivideAssign - 46)) | (1 << (JavaScriptParser.ModulusAssign - 46)) | (1 << (JavaScriptParser.PlusAssign - 46)) | (1 << (JavaScriptParser.MinusAssign - 46)) | (1 << (JavaScriptParser.LeftShiftArithmeticAssign - 46)) | (1 << (JavaScriptParser.RightShiftArithmeticAssign - 46)) | (1 << (JavaScriptParser.RightShiftLogicalAssign - 46)) | (1 << (JavaScriptParser.BitAndAssign - 46)) | (1 << (JavaScriptParser.BitXorAssign - 46)) | (1 << (JavaScriptParser.BitOrAssign - 46)) | (1 << (JavaScriptParser.PowerAssign - 46)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, JavaScriptParser.RULE_literal);
	    try {
	        this.state = 943;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.NullLiteral:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 936;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case JavaScriptParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 937;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        case JavaScriptParser.StringLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 938;
	            this.match(JavaScriptParser.StringLiteral);
	            break;
	        case JavaScriptParser.TemplateStringLiteral:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 939;
	            this.match(JavaScriptParser.TemplateStringLiteral);
	            break;
	        case JavaScriptParser.RegularExpressionLiteral:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 940;
	            this.match(JavaScriptParser.RegularExpressionLiteral);
	            break;
	        case JavaScriptParser.DecimalLiteral:
	        case JavaScriptParser.HexIntegerLiteral:
	        case JavaScriptParser.OctalIntegerLiteral:
	        case JavaScriptParser.OctalIntegerLiteral2:
	        case JavaScriptParser.BinaryIntegerLiteral:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 941;
	            this.numericLiteral();
	            break;
	        case JavaScriptParser.BigHexIntegerLiteral:
	        case JavaScriptParser.BigOctalIntegerLiteral:
	        case JavaScriptParser.BigBinaryIntegerLiteral:
	        case JavaScriptParser.BigDecimalIntegerLiteral:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 942;
	            this.bigintLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, JavaScriptParser.RULE_numericLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        _la = this._input.LA(1);
	        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (JavaScriptParser.DecimalLiteral - 61)) | (1 << (JavaScriptParser.HexIntegerLiteral - 61)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 61)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 61)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 61)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bigintLiteral() {
	    let localctx = new BigintLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, JavaScriptParser.RULE_bigintLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 947;
	        _la = this._input.LA(1);
	        if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (JavaScriptParser.BigHexIntegerLiteral - 66)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 66)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 66)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 66)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, JavaScriptParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 949;
	        if (!( this.n("get"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"get\")");
	        }
	        this.state = 950;
	        this.identifier();
	        this.state = 951;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, JavaScriptParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        if (!( this.n("set"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.n(\"set\")");
	        }
	        this.state = 954;
	        this.identifier();
	        this.state = 955;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, JavaScriptParser.RULE_identifierName);
	    try {
	        this.state = 959;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 957;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 958;
	            this.reservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, JavaScriptParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 961;
	        _la = this._input.LA(1);
	        if(!(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (JavaScriptParser.Async - 105)) | (1 << (JavaScriptParser.NonStrictLet - 105)) | (1 << (JavaScriptParser.Identifier - 105)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, JavaScriptParser.RULE_reservedWord);
	    try {
	        this.state = 966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Break:
	        case JavaScriptParser.Do:
	        case JavaScriptParser.Instanceof:
	        case JavaScriptParser.Typeof:
	        case JavaScriptParser.Case:
	        case JavaScriptParser.Else:
	        case JavaScriptParser.New:
	        case JavaScriptParser.Var:
	        case JavaScriptParser.Catch:
	        case JavaScriptParser.Finally:
	        case JavaScriptParser.Return:
	        case JavaScriptParser.Void:
	        case JavaScriptParser.Continue:
	        case JavaScriptParser.For:
	        case JavaScriptParser.Switch:
	        case JavaScriptParser.While:
	        case JavaScriptParser.Debugger:
	        case JavaScriptParser.Function:
	        case JavaScriptParser.This:
	        case JavaScriptParser.With:
	        case JavaScriptParser.Default:
	        case JavaScriptParser.If:
	        case JavaScriptParser.Throw:
	        case JavaScriptParser.Delete:
	        case JavaScriptParser.In:
	        case JavaScriptParser.Try:
	        case JavaScriptParser.As:
	        case JavaScriptParser.From:
	        case JavaScriptParser.Class:
	        case JavaScriptParser.Enum:
	        case JavaScriptParser.Extends:
	        case JavaScriptParser.Super:
	        case JavaScriptParser.Const:
	        case JavaScriptParser.Export:
	        case JavaScriptParser.Import:
	        case JavaScriptParser.Async:
	        case JavaScriptParser.Await:
	        case JavaScriptParser.Implements:
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	        case JavaScriptParser.Private:
	        case JavaScriptParser.Public:
	        case JavaScriptParser.Interface:
	        case JavaScriptParser.Package:
	        case JavaScriptParser.Protected:
	        case JavaScriptParser.Static:
	        case JavaScriptParser.Yield:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 963;
	            this.keyword();
	            break;
	        case JavaScriptParser.NullLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 964;
	            this.match(JavaScriptParser.NullLiteral);
	            break;
	        case JavaScriptParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 965;
	            this.match(JavaScriptParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, JavaScriptParser.RULE_keyword);
	    try {
	        this.state = 1014;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case JavaScriptParser.Break:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 968;
	            this.match(JavaScriptParser.Break);
	            break;
	        case JavaScriptParser.Do:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 969;
	            this.match(JavaScriptParser.Do);
	            break;
	        case JavaScriptParser.Instanceof:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 970;
	            this.match(JavaScriptParser.Instanceof);
	            break;
	        case JavaScriptParser.Typeof:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 971;
	            this.match(JavaScriptParser.Typeof);
	            break;
	        case JavaScriptParser.Case:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 972;
	            this.match(JavaScriptParser.Case);
	            break;
	        case JavaScriptParser.Else:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 973;
	            this.match(JavaScriptParser.Else);
	            break;
	        case JavaScriptParser.New:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 974;
	            this.match(JavaScriptParser.New);
	            break;
	        case JavaScriptParser.Var:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 975;
	            this.match(JavaScriptParser.Var);
	            break;
	        case JavaScriptParser.Catch:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 976;
	            this.match(JavaScriptParser.Catch);
	            break;
	        case JavaScriptParser.Finally:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 977;
	            this.match(JavaScriptParser.Finally);
	            break;
	        case JavaScriptParser.Return:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 978;
	            this.match(JavaScriptParser.Return);
	            break;
	        case JavaScriptParser.Void:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 979;
	            this.match(JavaScriptParser.Void);
	            break;
	        case JavaScriptParser.Continue:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 980;
	            this.match(JavaScriptParser.Continue);
	            break;
	        case JavaScriptParser.For:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 981;
	            this.match(JavaScriptParser.For);
	            break;
	        case JavaScriptParser.Switch:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 982;
	            this.match(JavaScriptParser.Switch);
	            break;
	        case JavaScriptParser.While:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 983;
	            this.match(JavaScriptParser.While);
	            break;
	        case JavaScriptParser.Debugger:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 984;
	            this.match(JavaScriptParser.Debugger);
	            break;
	        case JavaScriptParser.Function:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 985;
	            this.match(JavaScriptParser.Function);
	            break;
	        case JavaScriptParser.This:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 986;
	            this.match(JavaScriptParser.This);
	            break;
	        case JavaScriptParser.With:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 987;
	            this.match(JavaScriptParser.With);
	            break;
	        case JavaScriptParser.Default:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 988;
	            this.match(JavaScriptParser.Default);
	            break;
	        case JavaScriptParser.If:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 989;
	            this.match(JavaScriptParser.If);
	            break;
	        case JavaScriptParser.Throw:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 990;
	            this.match(JavaScriptParser.Throw);
	            break;
	        case JavaScriptParser.Delete:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 991;
	            this.match(JavaScriptParser.Delete);
	            break;
	        case JavaScriptParser.In:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 992;
	            this.match(JavaScriptParser.In);
	            break;
	        case JavaScriptParser.Try:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 993;
	            this.match(JavaScriptParser.Try);
	            break;
	        case JavaScriptParser.Class:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 994;
	            this.match(JavaScriptParser.Class);
	            break;
	        case JavaScriptParser.Enum:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 995;
	            this.match(JavaScriptParser.Enum);
	            break;
	        case JavaScriptParser.Extends:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 996;
	            this.match(JavaScriptParser.Extends);
	            break;
	        case JavaScriptParser.Super:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 997;
	            this.match(JavaScriptParser.Super);
	            break;
	        case JavaScriptParser.Const:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 998;
	            this.match(JavaScriptParser.Const);
	            break;
	        case JavaScriptParser.Export:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 999;
	            this.match(JavaScriptParser.Export);
	            break;
	        case JavaScriptParser.Import:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1000;
	            this.match(JavaScriptParser.Import);
	            break;
	        case JavaScriptParser.Implements:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1001;
	            this.match(JavaScriptParser.Implements);
	            break;
	        case JavaScriptParser.StrictLet:
	        case JavaScriptParser.NonStrictLet:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1002;
	            this.let_();
	            break;
	        case JavaScriptParser.Private:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1003;
	            this.match(JavaScriptParser.Private);
	            break;
	        case JavaScriptParser.Public:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1004;
	            this.match(JavaScriptParser.Public);
	            break;
	        case JavaScriptParser.Interface:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1005;
	            this.match(JavaScriptParser.Interface);
	            break;
	        case JavaScriptParser.Package:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1006;
	            this.match(JavaScriptParser.Package);
	            break;
	        case JavaScriptParser.Protected:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1007;
	            this.match(JavaScriptParser.Protected);
	            break;
	        case JavaScriptParser.Static:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1008;
	            this.match(JavaScriptParser.Static);
	            break;
	        case JavaScriptParser.Yield:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1009;
	            this.match(JavaScriptParser.Yield);
	            break;
	        case JavaScriptParser.Async:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1010;
	            this.match(JavaScriptParser.Async);
	            break;
	        case JavaScriptParser.Await:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1011;
	            this.match(JavaScriptParser.Await);
	            break;
	        case JavaScriptParser.From:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1012;
	            this.match(JavaScriptParser.From);
	            break;
	        case JavaScriptParser.As:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1013;
	            this.match(JavaScriptParser.As);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, JavaScriptParser.RULE_let_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        _la = this._input.LA(1);
	        if(!(_la===JavaScriptParser.StrictLet || _la===JavaScriptParser.NonStrictLet)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, JavaScriptParser.RULE_eos);
	    try {
	        this.state = 1022;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1018;
	            this.match(JavaScriptParser.SemiColon);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1019;
	            this.match(JavaScriptParser.EOF);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1020;
	            if (!( this.lineTerminatorAhead())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1021;
	            if (!( this.closeBrace())) {
	                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

JavaScriptParser.EOF = antlr4.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.MultiLineComment = 2;
JavaScriptParser.SingleLineComment = 3;
JavaScriptParser.RegularExpressionLiteral = 4;
JavaScriptParser.OpenBracket = 5;
JavaScriptParser.CloseBracket = 6;
JavaScriptParser.OpenParen = 7;
JavaScriptParser.CloseParen = 8;
JavaScriptParser.OpenBrace = 9;
JavaScriptParser.CloseBrace = 10;
JavaScriptParser.SemiColon = 11;
JavaScriptParser.Comma = 12;
JavaScriptParser.Assign = 13;
JavaScriptParser.QuestionMark = 14;
JavaScriptParser.Colon = 15;
JavaScriptParser.Ellipsis = 16;
JavaScriptParser.Dot = 17;
JavaScriptParser.PlusPlus = 18;
JavaScriptParser.MinusMinus = 19;
JavaScriptParser.Plus = 20;
JavaScriptParser.Minus = 21;
JavaScriptParser.BitNot = 22;
JavaScriptParser.Not = 23;
JavaScriptParser.Multiply = 24;
JavaScriptParser.Divide = 25;
JavaScriptParser.Modulus = 26;
JavaScriptParser.Power = 27;
JavaScriptParser.NullCoalesce = 28;
JavaScriptParser.Hashtag = 29;
JavaScriptParser.RightShiftArithmetic = 30;
JavaScriptParser.LeftShiftArithmetic = 31;
JavaScriptParser.RightShiftLogical = 32;
JavaScriptParser.LessThan = 33;
JavaScriptParser.MoreThan = 34;
JavaScriptParser.LessThanEquals = 35;
JavaScriptParser.GreaterThanEquals = 36;
JavaScriptParser.Equals_ = 37;
JavaScriptParser.NotEquals = 38;
JavaScriptParser.IdentityEquals = 39;
JavaScriptParser.IdentityNotEquals = 40;
JavaScriptParser.BitAnd = 41;
JavaScriptParser.BitXOr = 42;
JavaScriptParser.BitOr = 43;
JavaScriptParser.And = 44;
JavaScriptParser.Or = 45;
JavaScriptParser.MultiplyAssign = 46;
JavaScriptParser.DivideAssign = 47;
JavaScriptParser.ModulusAssign = 48;
JavaScriptParser.PlusAssign = 49;
JavaScriptParser.MinusAssign = 50;
JavaScriptParser.LeftShiftArithmeticAssign = 51;
JavaScriptParser.RightShiftArithmeticAssign = 52;
JavaScriptParser.RightShiftLogicalAssign = 53;
JavaScriptParser.BitAndAssign = 54;
JavaScriptParser.BitXorAssign = 55;
JavaScriptParser.BitOrAssign = 56;
JavaScriptParser.PowerAssign = 57;
JavaScriptParser.ARROW = 58;
JavaScriptParser.NullLiteral = 59;
JavaScriptParser.BooleanLiteral = 60;
JavaScriptParser.DecimalLiteral = 61;
JavaScriptParser.HexIntegerLiteral = 62;
JavaScriptParser.OctalIntegerLiteral = 63;
JavaScriptParser.OctalIntegerLiteral2 = 64;
JavaScriptParser.BinaryIntegerLiteral = 65;
JavaScriptParser.BigHexIntegerLiteral = 66;
JavaScriptParser.BigOctalIntegerLiteral = 67;
JavaScriptParser.BigBinaryIntegerLiteral = 68;
JavaScriptParser.BigDecimalIntegerLiteral = 69;
JavaScriptParser.Break = 70;
JavaScriptParser.Do = 71;
JavaScriptParser.Instanceof = 72;
JavaScriptParser.Typeof = 73;
JavaScriptParser.Case = 74;
JavaScriptParser.Else = 75;
JavaScriptParser.New = 76;
JavaScriptParser.Var = 77;
JavaScriptParser.Catch = 78;
JavaScriptParser.Finally = 79;
JavaScriptParser.Return = 80;
JavaScriptParser.Void = 81;
JavaScriptParser.Continue = 82;
JavaScriptParser.For = 83;
JavaScriptParser.Switch = 84;
JavaScriptParser.While = 85;
JavaScriptParser.Debugger = 86;
JavaScriptParser.Function = 87;
JavaScriptParser.This = 88;
JavaScriptParser.With = 89;
JavaScriptParser.Default = 90;
JavaScriptParser.If = 91;
JavaScriptParser.Throw = 92;
JavaScriptParser.Delete = 93;
JavaScriptParser.In = 94;
JavaScriptParser.Try = 95;
JavaScriptParser.As = 96;
JavaScriptParser.From = 97;
JavaScriptParser.Class = 98;
JavaScriptParser.Enum = 99;
JavaScriptParser.Extends = 100;
JavaScriptParser.Super = 101;
JavaScriptParser.Const = 102;
JavaScriptParser.Export = 103;
JavaScriptParser.Import = 104;
JavaScriptParser.Async = 105;
JavaScriptParser.Await = 106;
JavaScriptParser.Implements = 107;
JavaScriptParser.StrictLet = 108;
JavaScriptParser.NonStrictLet = 109;
JavaScriptParser.Private = 110;
JavaScriptParser.Public = 111;
JavaScriptParser.Interface = 112;
JavaScriptParser.Package = 113;
JavaScriptParser.Protected = 114;
JavaScriptParser.Static = 115;
JavaScriptParser.Yield = 116;
JavaScriptParser.Identifier = 117;
JavaScriptParser.StringLiteral = 118;
JavaScriptParser.TemplateStringLiteral = 119;
JavaScriptParser.WhiteSpaces = 120;
JavaScriptParser.LineTerminator = 121;
JavaScriptParser.HtmlComment = 122;
JavaScriptParser.CDataComment = 123;
JavaScriptParser.UnexpectedCharacter = 124;

JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_moduleItems = 7;
JavaScriptParser.RULE_importDefault = 8;
JavaScriptParser.RULE_importNamespace = 9;
JavaScriptParser.RULE_importFrom = 10;
JavaScriptParser.RULE_aliasName = 11;
JavaScriptParser.RULE_exportStatement = 12;
JavaScriptParser.RULE_exportFromBlock = 13;
JavaScriptParser.RULE_declaration = 14;
JavaScriptParser.RULE_variableStatement = 15;
JavaScriptParser.RULE_variableDeclarationList = 16;
JavaScriptParser.RULE_variableDeclaration = 17;
JavaScriptParser.RULE_emptyStatement = 18;
JavaScriptParser.RULE_expressionStatement = 19;
JavaScriptParser.RULE_ifStatement = 20;
JavaScriptParser.RULE_iterationStatement = 21;
JavaScriptParser.RULE_varModifier = 22;
JavaScriptParser.RULE_continueStatement = 23;
JavaScriptParser.RULE_breakStatement = 24;
JavaScriptParser.RULE_returnStatement = 25;
JavaScriptParser.RULE_yieldStatement = 26;
JavaScriptParser.RULE_withStatement = 27;
JavaScriptParser.RULE_switchStatement = 28;
JavaScriptParser.RULE_caseBlock = 29;
JavaScriptParser.RULE_caseClauses = 30;
JavaScriptParser.RULE_caseClause = 31;
JavaScriptParser.RULE_defaultClause = 32;
JavaScriptParser.RULE_labelledStatement = 33;
JavaScriptParser.RULE_throwStatement = 34;
JavaScriptParser.RULE_tryStatement = 35;
JavaScriptParser.RULE_catchProduction = 36;
JavaScriptParser.RULE_finallyProduction = 37;
JavaScriptParser.RULE_debuggerStatement = 38;
JavaScriptParser.RULE_functionDeclaration = 39;
JavaScriptParser.RULE_classDeclaration = 40;
JavaScriptParser.RULE_classTail = 41;
JavaScriptParser.RULE_classElement = 42;
JavaScriptParser.RULE_methodDefinition = 43;
JavaScriptParser.RULE_formalParameterList = 44;
JavaScriptParser.RULE_formalParameterArg = 45;
JavaScriptParser.RULE_lastFormalParameterArg = 46;
JavaScriptParser.RULE_functionBody = 47;
JavaScriptParser.RULE_sourceElements = 48;
JavaScriptParser.RULE_arrayLiteral = 49;
JavaScriptParser.RULE_elementList = 50;
JavaScriptParser.RULE_arrayElement = 51;
JavaScriptParser.RULE_propertyAssignment = 52;
JavaScriptParser.RULE_propertyName = 53;
JavaScriptParser.RULE_arguments = 54;
JavaScriptParser.RULE_argument = 55;
JavaScriptParser.RULE_expressionSequence = 56;
JavaScriptParser.RULE_singleExpression = 57;
JavaScriptParser.RULE_assignable = 58;
JavaScriptParser.RULE_objectLiteral = 59;
JavaScriptParser.RULE_anoymousFunction = 60;
JavaScriptParser.RULE_arrowFunctionParameters = 61;
JavaScriptParser.RULE_arrowFunctionBody = 62;
JavaScriptParser.RULE_assignmentOperator = 63;
JavaScriptParser.RULE_literal = 64;
JavaScriptParser.RULE_numericLiteral = 65;
JavaScriptParser.RULE_bigintLiteral = 66;
JavaScriptParser.RULE_getter = 67;
JavaScriptParser.RULE_setter = 68;
JavaScriptParser.RULE_identifierName = 69;
JavaScriptParser.RULE_identifier = 70;
JavaScriptParser.RULE_reservedWord = 71;
JavaScriptParser.RULE_keyword = 72;
JavaScriptParser.RULE_let_ = 73;
JavaScriptParser.RULE_eos = 74;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_program;
    }

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	HashBangLine() {
	    return this.getToken(JavaScriptParser.HashBangLine, 0);
	};

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitProgram(this);
		}
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElement(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	labelledStatement() {
	    return this.getTypedRuleContext(LabelledStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	debuggerStatement() {
	    return this.getTypedRuleContext(DebuggerStatementContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBlock(this);
		}
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitStatementList(this);
		}
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importStatement;
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	importFromBlock() {
	    return this.getTypedRuleContext(ImportFromBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportStatement(this);
		}
	}


}



class ImportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
    }

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	moduleItems() {
	    return this.getTypedRuleContext(ModuleItemsContext,0);
	};

	importDefault() {
	    return this.getTypedRuleContext(ImportDefaultContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFromBlock(this);
		}
	}


}



class ModuleItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_moduleItems;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	aliasName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AliasNameContext);
	    } else {
	        return this.getTypedRuleContext(AliasNameContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterModuleItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitModuleItems(this);
		}
	}


}



class ImportDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importDefault;
    }

	aliasName() {
	    return this.getTypedRuleContext(AliasNameContext,0);
	};

	Comma() {
	    return this.getToken(JavaScriptParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportDefault(this);
		}
	}


}



class ImportNamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importNamespace;
    }

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportNamespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportNamespace(this);
		}
	}


}



class ImportFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_importFrom;
    }

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportFrom(this);
		}
	}


}



class AliasNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_aliasName;
    }

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAliasName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAliasName(this);
		}
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExportDefaultDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDefaultDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDefaultDeclaration(this);
		}
	}


}

JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

class ExportDeclarationContext extends ExportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	exportFromBlock() {
	    return this.getTypedRuleContext(ExportFromBlockContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportDeclaration(this);
		}
	}


}

JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;

class ExportFromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
    }

	importNamespace() {
	    return this.getTypedRuleContext(ImportNamespaceContext,0);
	};

	importFrom() {
	    return this.getTypedRuleContext(ImportFromContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	moduleItems() {
	    return this.getTypedRuleContext(ModuleItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExportFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExportFromBlock(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_declaration;
    }

	variableStatement() {
	    return this.getTypedRuleContext(VariableStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class VariableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableStatement;
    }

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableStatement(this);
		}
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
    }

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_emptyStatement;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEmptyStatement(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDoStatement(this);
		}
	}


}

JavaScriptParser.DoStatementContext = DoStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}

JavaScriptParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.SemiColon);
	    } else {
	        return this.getToken(JavaScriptParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForStatement(this);
		}
	}


}

JavaScriptParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForInStatement(this);
		}
	}


}

JavaScriptParser.ForInStatementContext = ForInStatementContext;

class ForOfStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterForOfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitForOfStatement(this);
		}
	}


}

JavaScriptParser.ForOfStatementContext = ForOfStatementContext;

class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_varModifier;
    }

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVarModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVarModifier(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
    }

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitWithStatement(this);
		}
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseBlock(this);
		}
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClauses(this);
		}
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCaseClause(this);
		}
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDefaultClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDefaultClause(this);
		}
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLabelledStatement(this);
		}
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTryStatement(this);
		}
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCatchProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCatchProduction(this);
		}
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFinallyProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFinallyProduction(this);
		}
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDebuggerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDebuggerStatement(this);
		}
	}


}



class FunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
    }

	Function() {
	    return this.getToken(JavaScriptParser.Function, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDeclaration(this);
		}
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}


}



class ClassTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classTail;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	classElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassElementContext);
	    } else {
	        return this.getTypedRuleContext(ClassElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassTail(this);
		}
	}


}



class ClassElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_classElement;
    }

	methodDefinition() {
	    return this.getTypedRuleContext(MethodDefinitionContext,0);
	};

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	Static = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Static);
	    } else {
	        return this.getToken(JavaScriptParser.Static, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	Async = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Async);
	    } else {
	        return this.getToken(JavaScriptParser.Async, i);
	    }
	};


	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassElement(this);
		}
	}


}



class MethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMethodDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMethodDefinition(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
    }

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	lastFormalParameterArg() {
	    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
    }

	assignable() {
	    return this.getTypedRuleContext(AssignableContext,0);
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFormalParameterArg(this);
		}
	}


}



class LastFormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
    }

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLastFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLastFormalParameterArg(this);
		}
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_functionBody;
    }

	sourceElements() {
	    return this.getTypedRuleContext(SourceElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}


}



class SourceElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_sourceElements;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSourceElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSourceElements(this);
		}
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_elementList;
    }

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	arrayElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArrayElementContext);
	    } else {
	        return this.getTypedRuleContext(ArrayElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitElementList(this);
		}
	}


}



class ArrayElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrayElement;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayElement(this);
		}
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyExpressionAssignment(this);
		}
	}


}

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterComputedPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitComputedPropertyExpressionAssignment(this);
		}
	}


}

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyShorthand(this);
		}
	}


}

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	formalParameterArg() {
	    return this.getTypedRuleContext(FormalParameterArgContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertySetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertySetter(this);
		}
	}


}

JavaScriptParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyGetter(this);
		}
	}


}

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

class FunctionPropertyContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionProperty(this);
		}
	}


}

JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;

class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPropertyName(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArguments(this);
		}
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_argument;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Ellipsis() {
	    return this.getToken(JavaScriptParser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgument(this);
		}
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitExpressionSequence(this);
		}
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_singleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TemplateStringExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	TemplateStringLiteral() {
	    return this.getToken(JavaScriptParser.TemplateStringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTemplateStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTemplateStringExpression(this);
		}
	}


}

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

class TernaryExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Colon() {
	    return this.getToken(JavaScriptParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTernaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTernaryExpression(this);
		}
	}


}

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

class LogicalAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(JavaScriptParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}


}

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class PowerExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Power() {
	    return this.getToken(JavaScriptParser.Power, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPowerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPowerExpression(this);
		}
	}


}

JavaScriptParser.PowerExpressionContext = PowerExpressionContext;

class PreIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}


}

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

class ObjectLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteralExpression(this);
		}
	}


}

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

class MetaExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMetaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMetaExpression(this);
		}
	}


}

JavaScriptParser.MetaExpressionContext = MetaExpressionContext;

class InExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInExpression(this);
		}
	}


}

JavaScriptParser.InExpressionContext = InExpressionContext;

class LogicalOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(JavaScriptParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}


}

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class NotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(JavaScriptParser.Not, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNotExpression(this);
		}
	}


}

JavaScriptParser.NotExpressionContext = NotExpressionContext;

class PreDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPreDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPreDecreaseExpression(this);
		}
	}


}

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

class ArgumentsExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArgumentsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArgumentsExpression(this);
		}
	}


}

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

class AwaitExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAwaitExpression(this);
		}
	}


}

JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;

class ThisExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitThisExpression(this);
		}
	}


}

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

class FunctionExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	anoymousFunction() {
	    return this.getTypedRuleContext(AnoymousFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionExpression(this);
		}
	}


}

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

class UnaryMinusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryMinusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryMinusExpression(this);
		}
	}


}

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

class AssignmentExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Assign() {
	    return this.getToken(JavaScriptParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}


}

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

class PostDecreaseExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	MinusMinus() {
	    return this.getToken(JavaScriptParser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostDecreaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostDecreaseExpression(this);
		}
	}


}

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

class TypeofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitTypeofExpression(this);
		}
	}


}

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

class InstanceofExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterInstanceofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitInstanceofExpression(this);
		}
	}


}

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

class UnaryPlusExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterUnaryPlusExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitUnaryPlusExpression(this);
		}
	}


}

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

class DeleteExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterDeleteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitDeleteExpression(this);
		}
	}


}

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

class ImportExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterImportExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitImportExpression(this);
		}
	}


}

JavaScriptParser.ImportExpressionContext = ImportExpressionContext;

class EqualityExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(JavaScriptParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(JavaScriptParser.NotEquals, 0);
	};

	IdentityEquals() {
	    return this.getToken(JavaScriptParser.IdentityEquals, 0);
	};

	IdentityNotEquals() {
	    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

class BitXOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitXOr() {
	    return this.getToken(JavaScriptParser.BitXOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitXOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitXOrExpression(this);
		}
	}


}

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

class SuperExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSuperExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSuperExpression(this);
		}
	}


}

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

class MultiplicativeExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(JavaScriptParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(JavaScriptParser.Modulus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class BitShiftExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LeftShiftArithmetic() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
	};

	RightShiftArithmetic() {
	    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
	};

	RightShiftLogical() {
	    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitShiftExpression(this);
		}
	}


}

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

class ParenthesizedExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}


}

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class AdditiveExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(JavaScriptParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(JavaScriptParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(JavaScriptParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(JavaScriptParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(JavaScriptParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

class PostIncrementExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	PlusPlus() {
	    return this.getToken(JavaScriptParser.PlusPlus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}


}

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

class YieldExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterYieldExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitYieldExpression(this);
		}
	}


}

JavaScriptParser.YieldExpressionContext = YieldExpressionContext;

class BitNotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BitNot() {
	    return this.getToken(JavaScriptParser.BitNot, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitNotExpression(this);
		}
	}


}

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

class NewExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNewExpression(this);
		}
	}


}

JavaScriptParser.NewExpressionContext = NewExpressionContext;

class LiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}


}

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

class ArrayLiteralExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrayLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrayLiteralExpression(this);
		}
	}


}

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	Dot() {
	    return this.getToken(JavaScriptParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	QuestionMark() {
	    return this.getToken(JavaScriptParser.QuestionMark, 0);
	};

	Hashtag() {
	    return this.getToken(JavaScriptParser.Hashtag, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberDotExpression(this);
		}
	}


}

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

class ClassExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	classTail() {
	    return this.getTypedRuleContext(ClassTailContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterClassExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitClassExpression(this);
		}
	}


}

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

class MemberIndexExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBracket() {
	    return this.getToken(JavaScriptParser.OpenBracket, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseBracket() {
	    return this.getToken(JavaScriptParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterMemberIndexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitMemberIndexExpression(this);
		}
	}


}

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

class IdentifierExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}


}

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

class BitAndExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitAnd() {
	    return this.getToken(JavaScriptParser.BitAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitAndExpression(this);
		}
	}


}

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

class BitOrExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	BitOr() {
	    return this.getToken(JavaScriptParser.BitOr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBitOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBitOrExpression(this);
		}
	}


}

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

class AssignmentOperatorExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperatorExpression(this);
		}
	}


}

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

class VoidExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterVoidExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitVoidExpression(this);
		}
	}


}

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

class CoalesceExpressionContext extends SingleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	singleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SingleExpressionContext,i);
	    }
	};

	NullCoalesce() {
	    return this.getToken(JavaScriptParser.NullCoalesce, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterCoalesceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitCoalesceExpression(this);
		}
	}


}

JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

class AssignableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignable(this);
		}
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(JavaScriptParser.Comma);
	    } else {
	        return this.getToken(JavaScriptParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitObjectLiteral(this);
		}
	}


}



class AnoymousFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_anoymousFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AnoymousFunctionDeclContext extends AnoymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Function() {
	    return this.getToken(JavaScriptParser.Function, 0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Multiply() {
	    return this.getToken(JavaScriptParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAnoymousFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAnoymousFunctionDecl(this);
		}
	}


}

JavaScriptParser.AnoymousFunctionDeclContext = AnoymousFunctionDeclContext;

class ArrowFunctionContext extends AnoymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	ARROW() {
	    return this.getToken(JavaScriptParser.ARROW, 0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunction(this);
		}
	}


}

JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;

class FunctionDeclContext extends AnoymousFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionDeclaration() {
	    return this.getTypedRuleContext(FunctionDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitFunctionDecl(this);
		}
	}


}

JavaScriptParser.FunctionDeclContext = FunctionDeclContext;

class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(JavaScriptParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(JavaScriptParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionParameters(this);
		}
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
    }

	singleExpression() {
	    return this.getTypedRuleContext(SingleExpressionContext,0);
	};

	OpenBrace() {
	    return this.getToken(JavaScriptParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(JavaScriptParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterArrowFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitArrowFunctionBody(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(JavaScriptParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(JavaScriptParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(JavaScriptParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(JavaScriptParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(JavaScriptParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(JavaScriptParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(JavaScriptParser.BitOrAssign, 0);
	};

	PowerAssign() {
	    return this.getToken(JavaScriptParser.PowerAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_literal;
    }

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(JavaScriptParser.StringLiteral, 0);
	};

	TemplateStringLiteral() {
	    return this.getToken(JavaScriptParser.TemplateStringLiteral, 0);
	};

	RegularExpressionLiteral() {
	    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	bigintLiteral() {
	    return this.getTypedRuleContext(BigintLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
    }

	DecimalLiteral() {
	    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
	};

	HexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
	};

	OctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
	};

	OctalIntegerLiteral2() {
	    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
	};

	BinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class BigintLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
    }

	BigDecimalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
	};

	BigHexIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
	};

	BigOctalIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
	};

	BigBinaryIntegerLiteral() {
	    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterBigintLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitBigintLiteral(this);
		}
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_getter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitGetter(this);
		}
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_setter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitSetter(this);
		}
	}


}



class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifierName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	reservedWord() {
	    return this.getTypedRuleContext(ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifierName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifierName(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(JavaScriptParser.Identifier, 0);
	};

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(JavaScriptParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitReservedWord(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(JavaScriptParser.Break, 0);
	};

	Do() {
	    return this.getToken(JavaScriptParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(JavaScriptParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(JavaScriptParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(JavaScriptParser.Case, 0);
	};

	Else() {
	    return this.getToken(JavaScriptParser.Else, 0);
	};

	New() {
	    return this.getToken(JavaScriptParser.New, 0);
	};

	Var() {
	    return this.getToken(JavaScriptParser.Var, 0);
	};

	Catch() {
	    return this.getToken(JavaScriptParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(JavaScriptParser.Finally, 0);
	};

	Return() {
	    return this.getToken(JavaScriptParser.Return, 0);
	};

	Void() {
	    return this.getToken(JavaScriptParser.Void, 0);
	};

	Continue() {
	    return this.getToken(JavaScriptParser.Continue, 0);
	};

	For() {
	    return this.getToken(JavaScriptParser.For, 0);
	};

	Switch() {
	    return this.getToken(JavaScriptParser.Switch, 0);
	};

	While() {
	    return this.getToken(JavaScriptParser.While, 0);
	};

	Debugger() {
	    return this.getToken(JavaScriptParser.Debugger, 0);
	};

	Function() {
	    return this.getToken(JavaScriptParser.Function, 0);
	};

	This() {
	    return this.getToken(JavaScriptParser.This, 0);
	};

	With() {
	    return this.getToken(JavaScriptParser.With, 0);
	};

	Default() {
	    return this.getToken(JavaScriptParser.Default, 0);
	};

	If() {
	    return this.getToken(JavaScriptParser.If, 0);
	};

	Throw() {
	    return this.getToken(JavaScriptParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(JavaScriptParser.Delete, 0);
	};

	In() {
	    return this.getToken(JavaScriptParser.In, 0);
	};

	Try() {
	    return this.getToken(JavaScriptParser.Try, 0);
	};

	Class() {
	    return this.getToken(JavaScriptParser.Class, 0);
	};

	Enum() {
	    return this.getToken(JavaScriptParser.Enum, 0);
	};

	Extends() {
	    return this.getToken(JavaScriptParser.Extends, 0);
	};

	Super() {
	    return this.getToken(JavaScriptParser.Super, 0);
	};

	Const() {
	    return this.getToken(JavaScriptParser.Const, 0);
	};

	Export() {
	    return this.getToken(JavaScriptParser.Export, 0);
	};

	Import() {
	    return this.getToken(JavaScriptParser.Import, 0);
	};

	Implements() {
	    return this.getToken(JavaScriptParser.Implements, 0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	Private() {
	    return this.getToken(JavaScriptParser.Private, 0);
	};

	Public() {
	    return this.getToken(JavaScriptParser.Public, 0);
	};

	Interface() {
	    return this.getToken(JavaScriptParser.Interface, 0);
	};

	Package() {
	    return this.getToken(JavaScriptParser.Package, 0);
	};

	Protected() {
	    return this.getToken(JavaScriptParser.Protected, 0);
	};

	Static() {
	    return this.getToken(JavaScriptParser.Static, 0);
	};

	Yield() {
	    return this.getToken(JavaScriptParser.Yield, 0);
	};

	Async() {
	    return this.getToken(JavaScriptParser.Async, 0);
	};

	Await() {
	    return this.getToken(JavaScriptParser.Await, 0);
	};

	From() {
	    return this.getToken(JavaScriptParser.From, 0);
	};

	As() {
	    return this.getToken(JavaScriptParser.As, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_let_;
    }

	NonStrictLet() {
	    return this.getToken(JavaScriptParser.NonStrictLet, 0);
	};

	StrictLet() {
	    return this.getToken(JavaScriptParser.StrictLet, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterLet_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitLet_(this);
		}
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = JavaScriptParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(JavaScriptParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(JavaScriptParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof JavaScriptParserListener ) {
	        listener.exitEos(this);
		}
	}


}




JavaScriptParser.ProgramContext = ProgramContext; 
JavaScriptParser.SourceElementContext = SourceElementContext; 
JavaScriptParser.StatementContext = StatementContext; 
JavaScriptParser.BlockContext = BlockContext; 
JavaScriptParser.StatementListContext = StatementListContext; 
JavaScriptParser.ImportStatementContext = ImportStatementContext; 
JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext; 
JavaScriptParser.ModuleItemsContext = ModuleItemsContext; 
JavaScriptParser.ImportDefaultContext = ImportDefaultContext; 
JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext; 
JavaScriptParser.ImportFromContext = ImportFromContext; 
JavaScriptParser.AliasNameContext = AliasNameContext; 
JavaScriptParser.ExportStatementContext = ExportStatementContext; 
JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext; 
JavaScriptParser.DeclarationContext = DeclarationContext; 
JavaScriptParser.VariableStatementContext = VariableStatementContext; 
JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext; 
JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext; 
JavaScriptParser.EmptyStatementContext = EmptyStatementContext; 
JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext; 
JavaScriptParser.IfStatementContext = IfStatementContext; 
JavaScriptParser.IterationStatementContext = IterationStatementContext; 
JavaScriptParser.VarModifierContext = VarModifierContext; 
JavaScriptParser.ContinueStatementContext = ContinueStatementContext; 
JavaScriptParser.BreakStatementContext = BreakStatementContext; 
JavaScriptParser.ReturnStatementContext = ReturnStatementContext; 
JavaScriptParser.YieldStatementContext = YieldStatementContext; 
JavaScriptParser.WithStatementContext = WithStatementContext; 
JavaScriptParser.SwitchStatementContext = SwitchStatementContext; 
JavaScriptParser.CaseBlockContext = CaseBlockContext; 
JavaScriptParser.CaseClausesContext = CaseClausesContext; 
JavaScriptParser.CaseClauseContext = CaseClauseContext; 
JavaScriptParser.DefaultClauseContext = DefaultClauseContext; 
JavaScriptParser.LabelledStatementContext = LabelledStatementContext; 
JavaScriptParser.ThrowStatementContext = ThrowStatementContext; 
JavaScriptParser.TryStatementContext = TryStatementContext; 
JavaScriptParser.CatchProductionContext = CatchProductionContext; 
JavaScriptParser.FinallyProductionContext = FinallyProductionContext; 
JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext; 
JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext; 
JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext; 
JavaScriptParser.ClassTailContext = ClassTailContext; 
JavaScriptParser.ClassElementContext = ClassElementContext; 
JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext; 
JavaScriptParser.FormalParameterListContext = FormalParameterListContext; 
JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext; 
JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext; 
JavaScriptParser.FunctionBodyContext = FunctionBodyContext; 
JavaScriptParser.SourceElementsContext = SourceElementsContext; 
JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext; 
JavaScriptParser.ElementListContext = ElementListContext; 
JavaScriptParser.ArrayElementContext = ArrayElementContext; 
JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext; 
JavaScriptParser.PropertyNameContext = PropertyNameContext; 
JavaScriptParser.ArgumentsContext = ArgumentsContext; 
JavaScriptParser.ArgumentContext = ArgumentContext; 
JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext; 
JavaScriptParser.SingleExpressionContext = SingleExpressionContext; 
JavaScriptParser.AssignableContext = AssignableContext; 
JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext; 
JavaScriptParser.AnoymousFunctionContext = AnoymousFunctionContext; 
JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext; 
JavaScriptParser.LiteralContext = LiteralContext; 
JavaScriptParser.NumericLiteralContext = NumericLiteralContext; 
JavaScriptParser.BigintLiteralContext = BigintLiteralContext; 
JavaScriptParser.GetterContext = GetterContext; 
JavaScriptParser.SetterContext = SetterContext; 
JavaScriptParser.IdentifierNameContext = IdentifierNameContext; 
JavaScriptParser.IdentifierContext = IdentifierContext; 
JavaScriptParser.ReservedWordContext = ReservedWordContext; 
JavaScriptParser.KeywordContext = KeywordContext; 
JavaScriptParser.Let_Context = Let_Context; 
JavaScriptParser.EosContext = EosContext; 
